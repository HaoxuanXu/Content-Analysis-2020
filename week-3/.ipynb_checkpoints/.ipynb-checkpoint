{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 3 - Classification\n",
    "\n",
    "This week, we shift from gathering human textual classifications through crowdsourcing, to using machine learning models and algorithms that train on those human classifications and extend them to documents far too numerous to read. If you recall, *clustering* allows us to stably partition text data (e.g., documents, turns of conversation) according to all patterns of covariation among available text features. *Classification*, by contrast, partitions text data according to only those features and their variation that enable us to mimic and extrapolate human annotations.\n",
    "\n",
    "In this notebook, we will show how to use a variety of classification methods, including Na√Øve Bayes, Logistic regression, K-nearest neighbor, decision trees and random forests, support vector machines and even a simple neural network, the perceptron. We will also demonstrate ensemble techniques that can link several such methods into a single, more accurate, classification pipeline. We will finally learn to use conventions and metrics to evaluate classifier performance on out-of-sample data. \n",
    "\n",
    "For this notebook we will be using the following packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Special module written for this class\n",
    "#This provides access to data and to helper functions from previous weeks\n",
    "#Make sure you update it before starting this notebook\n",
    "import lucem_illud_2020 #pip install -U git+git://github.com/Computational-Content-Analysis-2020/lucem_illud_2020.git\n",
    "\n",
    "#All these packages need to be installed from pip\n",
    "#For ML\n",
    "import sklearn\n",
    "import sklearn.feature_extraction\n",
    "import sklearn.datasets\n",
    "import sklearn.naive_bayes\n",
    "import sklearn.tree\n",
    "import sklearn.ensemble\n",
    "import sklearn.neural_network\n",
    "import sklearn.decomposition\n",
    "\n",
    "import numpy as np #arrays\n",
    "import matplotlib.pyplot as plt #Plots\n",
    "import matplotlib.colors # For nice colours\n",
    "import seaborn #Makes plots look nice, also heatmaps\n",
    "import scipy as sp #for interp\n",
    "\n",
    "#These are from the standard library\n",
    "import collections\n",
    "import os\n",
    "import os.path\n",
    "import random\n",
    "import re\n",
    "import glob\n",
    "import pandas\n",
    "import requests\n",
    "import json\n",
    "import math\n",
    "\n",
    "#This 'magic' command makes the plots work better\n",
    "#in the notebook, don't use it outside of a notebook.\n",
    "#Also you can ignore the warning\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Simulated Examples\n",
    "\n",
    "Here we create a sandbox for you to explore different types of classified data and how different statistical classifiers perform on each type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating example data\n",
    "\n",
    "We start by loading one of the \"cartoon\" or simplified data sets and then dividing it into training and testing sets. To maximize our ability to visualize, each dataset involves two classes, colored yellow and blue, arrayed along two two dimensions (`x` and `y`). \n",
    "\n",
    "The four data patterns include: \n",
    "+ `random` in which the two classes are randomly distributed across both dimensions\n",
    "+ `andSplit` in which the two classes are linearly split along one of two dimensions (e.g., men like Adidas)\n",
    "+ `xorSplit` in which the two classes are split, oppositely, along each dimension (e.g., old ladies and young men like Nikes)\n",
    "+ `targetSplit` in which one class is nested within the other in two dimensions (e.g., middle aged, middle income people like vintage Mustangs)\n",
    "+ `multiBlobs` in which 5 classes are placed as bivariate Gaussians at random locations\n",
    "\n",
    "`noise` is a variable [0-1] that ranges from no noise in the prescribed pattern [0] to complete noise/randomness [1].\n",
    "\n",
    "Uncomment (remove the # in front of) each dataset, one at a time, and then run the cell and subsequent cells to examine how each machine learning approach captures each pattern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "noise = .2\n",
    "\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.random())\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.andSplit(noise))\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.xorSplit(noise)) #Please try this one\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.targetSplit(noise))\n",
    "dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.multiBlobs(noise))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can easily visualize the rendered datasets because they are generated in two dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotter(dfTrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training a Machine Learning algorithm\n",
    "\n",
    "We can now pick a model, there are many more options in `scikit-learn`. These are just a few examples, which array along the machine learning \"tribes\" described in Pedro Domingos _The Master Algorithm_.\n",
    "\n",
    "Uncomment (remove the # in front of) each algorithm one at a time, then run the cell and subsequent cells to evaluate how it learns to understand the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bayes\n",
    "clf_nb = sklearn.naive_bayes.GaussianNB()\n",
    "\n",
    "#Analogizes\n",
    "clf_linear_svc = sklearn.svm.SVC(kernel = 'linear', probability = True) #slow, set probability = False to speed up\n",
    "clf_poly_svc = sklearn.svm.SVC(kernel = 'poly', degree = 3, probability = True) #slower\n",
    "clf_knn = sklearn.neighbors.KNeighborsClassifier(5, weights='distance')# k, 'distance' or 'uniform'\n",
    "\n",
    "#Classical Regression\n",
    "clf_linear_reg = sklearn.linear_model.LogisticRegression()\n",
    "\n",
    "#Symbolists\n",
    "clf_decision_tree = sklearn.tree.DecisionTreeClassifier()\n",
    "clf_RF = sklearn.ensemble.RandomForestClassifier()\n",
    "\n",
    "#Connectionists\n",
    "clf_nn = sklearn.neural_network.MLPClassifier()\n",
    "\n",
    "#Ensemble\n",
    "clf_gb = sklearn.ensemble.GradientBoostingClassifier()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we fit the model by giving it our training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\John Xu\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\neural_network\\_multilayer_perceptron.py:571: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n",
       "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
       "                           max_features=None, max_leaf_nodes=None,\n",
       "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                           min_samples_leaf=1, min_samples_split=2,\n",
       "                           min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                           n_iter_no_change=None, presort='deprecated',\n",
       "                           random_state=None, subsample=1.0, tol=0.0001,\n",
       "                           validation_fraction=0.1, verbose=0,\n",
       "                           warm_start=False)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_nb.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_linear_svc.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_poly_svc.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_knn.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_linear_reg.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_decision_tree.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_RF.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_nn.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_gb.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithm evaluation\n",
    "\n",
    "We can look at few measurements of each classifier's performance by using the testing set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.08</td>\n",
       "      <td>0.920802</td>\n",
       "      <td>0.898990</td>\n",
       "      <td>0.872212</td>\n",
       "      <td>0.936842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.08</td>\n",
       "      <td>0.920802</td>\n",
       "      <td>0.940594</td>\n",
       "      <td>0.901014</td>\n",
       "      <td>0.904762</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0               0.08  0.920802   0.898990           0.872212  0.936842\n",
       "1               0.08  0.920802   0.940594           0.901014  0.904762"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nb, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.08</td>\n",
       "      <td>0.920802</td>\n",
       "      <td>0.898990</td>\n",
       "      <td>0.872212</td>\n",
       "      <td>0.936842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.08</td>\n",
       "      <td>0.920802</td>\n",
       "      <td>0.940594</td>\n",
       "      <td>0.901014</td>\n",
       "      <td>0.904762</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0               0.08  0.920802   0.898990           0.872212  0.936842\n",
       "1               0.08  0.920802   0.940594           0.901014  0.904762"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nb, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.385</td>\n",
       "      <td>0.630827</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.551316</td>\n",
       "      <td>0.947368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.385</td>\n",
       "      <td>0.630827</td>\n",
       "      <td>0.868421</td>\n",
       "      <td>0.632932</td>\n",
       "      <td>0.314286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.385  0.630827   0.555556           0.551316  0.947368\n",
       "1              0.385  0.630827   0.868421           0.632932  0.314286"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_linear_svc, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.445</td>\n",
       "      <td>0.57619</td>\n",
       "      <td>0.516304</td>\n",
       "      <td>0.516304</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.445</td>\n",
       "      <td>0.57619</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.597381</td>\n",
       "      <td>0.152381</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate      AUC  Precision  Average_Precision    Recall\n",
       "Category                                                             \n",
       "0              0.445  0.57619   0.516304           0.516304  1.000000\n",
       "1              0.445  0.57619   1.000000           0.597381  0.152381"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_poly_svc, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.884962</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.828684</td>\n",
       "      <td>0.884211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.884962</td>\n",
       "      <td>0.894231</td>\n",
       "      <td>0.852033</td>\n",
       "      <td>0.885714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.115  0.884962   0.875000           0.828684  0.884211\n",
       "1              0.115  0.884962   0.894231           0.852033  0.885714"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_knn, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.568421</td>\n",
       "      <td>0.526316</td>\n",
       "      <td>0.512812</td>\n",
       "      <td>0.736842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.568421</td>\n",
       "      <td>0.626866</td>\n",
       "      <td>0.565746</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0               0.44  0.568421   0.526316           0.512812  0.736842\n",
       "1               0.44  0.568421   0.626866           0.565746  0.400000"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_linear_reg, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.165</td>\n",
       "      <td>0.832832</td>\n",
       "      <td>0.852273</td>\n",
       "      <td>0.772847</td>\n",
       "      <td>0.789474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.165</td>\n",
       "      <td>0.832832</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.784728</td>\n",
       "      <td>0.876190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.165  0.832832   0.852273           0.772847  0.789474\n",
       "1              0.165  0.832832   0.821429           0.784728  0.876190"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_decision_tree, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.883459</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.837368</td>\n",
       "      <td>0.852632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.883459</td>\n",
       "      <td>0.872727</td>\n",
       "      <td>0.842922</td>\n",
       "      <td>0.914286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.115  0.883459   0.900000           0.837368  0.852632\n",
       "1              0.115  0.883459   0.872727           0.842922  0.914286"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_RF, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.09</td>\n",
       "      <td>0.911779</td>\n",
       "      <td>0.873786</td>\n",
       "      <td>0.852798</td>\n",
       "      <td>0.947368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.09</td>\n",
       "      <td>0.911779</td>\n",
       "      <td>0.948454</td>\n",
       "      <td>0.896026</td>\n",
       "      <td>0.876190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0               0.09  0.911779   0.873786           0.852798  0.947368\n",
       "1               0.09  0.911779   0.948454           0.896026  0.876190"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nn, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.88396</td>\n",
       "      <td>0.891304</td>\n",
       "      <td>0.834336</td>\n",
       "      <td>0.863158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.115</td>\n",
       "      <td>0.88396</td>\n",
       "      <td>0.879630</td>\n",
       "      <td>0.845855</td>\n",
       "      <td>0.904762</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate      AUC  Precision  Average_Precision    Recall\n",
       "Category                                                             \n",
       "0              0.115  0.88396   0.891304           0.834336  0.863158\n",
       "1              0.115  0.88396   0.879630           0.845855  0.904762"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_gb, dfTest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This lets us look at which classes do better:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf, dfTest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The greater the area under the curve the better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotMultiROC(clf, dfTest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also look at the regions the classifer identifies as one class or the other:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(clf, dfTrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we do the same for real data\n",
    "\n",
    "Available data sets include:\n",
    "+ Reddit threads \"classified\" by thread topic\n",
    "+ 20 newsgroups \"classified\" by group topic\n",
    "+ Senate press releases \"classified\" by Senator (2 senators)\n",
    "+ Senate press releases \"classified\" by Senator (5 senators)\n",
    "+ Emails classified as Spam or Ham"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'sklearn' has no attribute 'datasets'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-106-0cbb86ff78f2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadReddit())\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdfTrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdfTest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrainTestSplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloadNewsGroups\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;31m#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSenateSmall())\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSenateLarge())\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSpam())\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\lucem_illud_2020\\loaders.py\u001b[0m in \u001b[0;36mloadNewsGroups\u001b[1;34m(categories)\u001b[0m\n\u001b[0;32m     82\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mloadNewsGroups\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcategories\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m'comp.sys.mac.hardware'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'comp.windows.x'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'misc.forsale'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'rec.autos'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     83\u001b[0m     \u001b[0mnewsgroupsCategories\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcategories\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 84\u001b[1;33m     \u001b[0mnewsgroups\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatasets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfetch_20newsgroups\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'train'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata_home\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdataDirectory\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     85\u001b[0m     \u001b[0mnewsgroupsDF\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m'text'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'category'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'source_file'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     86\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'sklearn' has no attribute 'datasets'"
     ]
    }
   ],
   "source": [
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadReddit())\n",
    "dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadNewsGroups())\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSenateSmall())\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSenateLarge())\n",
    "#dfTrain, dfTest = lucem_illud_2020.trainTestSplit(lucem_illud_2020.loadSpam())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bayes\n",
    "clf_nb = sklearn.naive_bayes.GaussianNB()\n",
    "\n",
    "#Analogizes\n",
    "clf_linear_svc = sklearn.svm.SVC(kernel = 'linear', probability = True) #slow, set probability = False to speed up, but lose ROC\n",
    "clf_poly_svc = sklearn.svm.SVC(kernel = 'poly', degree = 3, probability = True) #slower\n",
    "clf_knn = sklearn.neighbors.KNeighborsClassifier(5, weights='distance')# k, 'distance' or 'uniform'\n",
    "\n",
    "#Classical Regression\n",
    "clf_linear_reg = sklearn.linear_model.LogisticRegression()\n",
    "\n",
    "#Symbolists\n",
    "clf_decision_tree = sklearn.tree.DecisionTreeClassifier()\n",
    "clf_RF = sklearn.ensemble.RandomForestClassifier()\n",
    "\n",
    "#Connectionists\n",
    "clf_nn = sklearn.neural_network.MLPClassifier()\n",
    "\n",
    "#Ensemble\n",
    "clf_gb = sklearn.ensemble.GradientBoostingClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n",
       "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
       "                           max_features=None, max_leaf_nodes=None,\n",
       "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                           min_samples_leaf=1, min_samples_split=2,\n",
       "                           min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                           n_iter_no_change=None, presort='deprecated',\n",
       "                           random_state=None, subsample=1.0, tol=0.0001,\n",
       "                           validation_fraction=0.1, verbose=0,\n",
       "                           warm_start=False)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_nb.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_linear_svc.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_poly_svc.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_knn.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_linear_reg.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_decision_tree.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_RF.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_nn.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])\n",
    "clf_gb.fit(np.stack(dfTrain['vect'], axis=0), dfTrain['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.068966</td>\n",
       "      <td>0.883092</td>\n",
       "      <td>0.942029</td>\n",
       "      <td>0.794160</td>\n",
       "      <td>0.783133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.106583</td>\n",
       "      <td>0.839614</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.652170</td>\n",
       "      <td>0.736842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.153605</td>\n",
       "      <td>0.892987</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.620419</td>\n",
       "      <td>0.987654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.159875</td>\n",
       "      <td>0.728165</td>\n",
       "      <td>0.769231</td>\n",
       "      <td>0.511741</td>\n",
       "      <td>0.506329</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.068966  0.883092   0.942029           0.794160   \n",
       "Bad Roommates              0.106583  0.839614   0.800000           0.652170   \n",
       "Weeaboo Tales              0.153605  0.892987   0.625000           0.620419   \n",
       "Relationships              0.159875  0.728165   0.769231           0.511741   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.783133  \n",
       "Bad Roommates            0.736842  \n",
       "Weeaboo Tales            0.987654  \n",
       "Relationships            0.506329  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nb, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.009404</td>\n",
       "      <td>0.989739</td>\n",
       "      <td>0.976190</td>\n",
       "      <td>0.967564</td>\n",
       "      <td>0.987952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.015674</td>\n",
       "      <td>0.985191</td>\n",
       "      <td>0.949367</td>\n",
       "      <td>0.940010</td>\n",
       "      <td>0.986842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.018809</td>\n",
       "      <td>0.966271</td>\n",
       "      <td>0.986667</td>\n",
       "      <td>0.939893</td>\n",
       "      <td>0.936709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.009404  0.989739   0.976190           0.967564   \n",
       "Bad Roommates              0.015674  0.985191   0.949367           0.940010   \n",
       "Weeaboo Tales              0.000000  1.000000   1.000000           1.000000   \n",
       "Relationships              0.018809  0.966271   0.986667           0.939893   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.987952  \n",
       "Bad Roommates            0.986842  \n",
       "Weeaboo Tales            1.000000  \n",
       "Relationships            0.936709  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_linear_svc, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.028213</td>\n",
       "      <td>0.980932</td>\n",
       "      <td>0.902174</td>\n",
       "      <td>0.902174</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.034483</td>\n",
       "      <td>0.945717</td>\n",
       "      <td>0.945205</td>\n",
       "      <td>0.880091</td>\n",
       "      <td>0.907895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.021944</td>\n",
       "      <td>0.956790</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.935524</td>\n",
       "      <td>0.913580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.028213</td>\n",
       "      <td>0.964267</td>\n",
       "      <td>0.937500</td>\n",
       "      <td>0.902571</td>\n",
       "      <td>0.949367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.028213  0.980932   0.902174           0.902174   \n",
       "Bad Roommates              0.034483  0.945717   0.945205           0.880091   \n",
       "Weeaboo Tales              0.021944  0.956790   1.000000           0.935524   \n",
       "Relationships              0.028213  0.964267   0.937500           0.902571   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  1.000000  \n",
       "Bad Roommates            0.907895  \n",
       "Weeaboo Tales            0.913580  \n",
       "Relationships            0.949367  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_poly_svc, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.031348</td>\n",
       "      <td>0.955381</td>\n",
       "      <td>0.950617</td>\n",
       "      <td>0.900707</td>\n",
       "      <td>0.927711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.059561</td>\n",
       "      <td>0.920213</td>\n",
       "      <td>0.870130</td>\n",
       "      <td>0.795301</td>\n",
       "      <td>0.881579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.047022</td>\n",
       "      <td>0.960343</td>\n",
       "      <td>0.858696</td>\n",
       "      <td>0.843763</td>\n",
       "      <td>0.975309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.081505</td>\n",
       "      <td>0.869409</td>\n",
       "      <td>0.884058</td>\n",
       "      <td>0.739053</td>\n",
       "      <td>0.772152</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.031348  0.955381   0.950617           0.900707   \n",
       "Bad Roommates              0.059561  0.920213   0.870130           0.795301   \n",
       "Weeaboo Tales              0.047022  0.960343   0.858696           0.843763   \n",
       "Relationships              0.081505  0.869409   0.884058           0.739053   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.927711  \n",
       "Bad Roommates            0.881579  \n",
       "Weeaboo Tales            0.975309  \n",
       "Relationships            0.772152  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_knn, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.012539</td>\n",
       "      <td>0.987620</td>\n",
       "      <td>0.964706</td>\n",
       "      <td>0.956218</td>\n",
       "      <td>0.987952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.012539</td>\n",
       "      <td>0.987248</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.952021</td>\n",
       "      <td>0.986842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.003135</td>\n",
       "      <td>0.993827</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.990789</td>\n",
       "      <td>0.987654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.021944</td>\n",
       "      <td>0.964188</td>\n",
       "      <td>0.973684</td>\n",
       "      <td>0.927733</td>\n",
       "      <td>0.936709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.012539  0.987620   0.964706           0.956218   \n",
       "Bad Roommates              0.012539  0.987248   0.961538           0.952021   \n",
       "Weeaboo Tales              0.003135  0.993827   1.000000           0.990789   \n",
       "Relationships              0.021944  0.964188   0.973684           0.927733   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.987952  \n",
       "Bad Roommates            0.986842  \n",
       "Weeaboo Tales            0.987654  \n",
       "Relationships            0.936709  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_linear_reg, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.050157</td>\n",
       "      <td>0.930953</td>\n",
       "      <td>0.913580</td>\n",
       "      <td>0.842730</td>\n",
       "      <td>0.891566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.043887</td>\n",
       "      <td>0.930501</td>\n",
       "      <td>0.930556</td>\n",
       "      <td>0.848571</td>\n",
       "      <td>0.881579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.072100</td>\n",
       "      <td>0.919105</td>\n",
       "      <td>0.829545</td>\n",
       "      <td>0.772693</td>\n",
       "      <td>0.901235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.040752</td>\n",
       "      <td>0.943196</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.863229</td>\n",
       "      <td>0.911392</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.050157  0.930953   0.913580           0.842730   \n",
       "Bad Roommates              0.043887  0.930501   0.930556           0.848571   \n",
       "Weeaboo Tales              0.072100  0.919105   0.829545           0.772693   \n",
       "Relationships              0.040752  0.943196   0.923077           0.863229   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.891566  \n",
       "Bad Roommates            0.881579  \n",
       "Weeaboo Tales            0.901235  \n",
       "Relationships            0.911392  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_decision_tree, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.015674</td>\n",
       "      <td>0.981596</td>\n",
       "      <td>0.964286</td>\n",
       "      <td>0.947320</td>\n",
       "      <td>0.975904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.021944</td>\n",
       "      <td>0.967511</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.922013</td>\n",
       "      <td>0.947368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.009404</td>\n",
       "      <td>0.989625</td>\n",
       "      <td>0.975610</td>\n",
       "      <td>0.966700</td>\n",
       "      <td>0.987654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.021944</td>\n",
       "      <td>0.968434</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.925392</td>\n",
       "      <td>0.949367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.015674  0.981596   0.964286           0.947320   \n",
       "Bad Roommates              0.021944  0.967511   0.960000           0.922013   \n",
       "Weeaboo Tales              0.009404  0.989625   0.975610           0.966700   \n",
       "Relationships              0.021944  0.968434   0.961538           0.925392   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.975904  \n",
       "Bad Roommates            0.947368  \n",
       "Weeaboo Tales            0.987654  \n",
       "Relationships            0.949367  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_RF, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.006270</td>\n",
       "      <td>0.991857</td>\n",
       "      <td>0.987952</td>\n",
       "      <td>0.979184</td>\n",
       "      <td>0.987952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.018809</td>\n",
       "      <td>0.974090</td>\n",
       "      <td>0.960526</td>\n",
       "      <td>0.932015</td>\n",
       "      <td>0.960526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.006270</td>\n",
       "      <td>0.995798</td>\n",
       "      <td>0.975904</td>\n",
       "      <td>0.975904</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.018809</td>\n",
       "      <td>0.970517</td>\n",
       "      <td>0.974026</td>\n",
       "      <td>0.937247</td>\n",
       "      <td>0.949367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.006270  0.991857   0.987952           0.979184   \n",
       "Bad Roommates              0.018809  0.974090   0.960526           0.932015   \n",
       "Weeaboo Tales              0.006270  0.995798   0.975904           0.975904   \n",
       "Relationships              0.018809  0.970517   0.974026           0.937247   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.987952  \n",
       "Bad Roommates            0.960526  \n",
       "Weeaboo Tales            1.000000  \n",
       "Relationships            0.949367  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nn, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tales From Tech Support</th>\n",
       "      <td>0.015674</td>\n",
       "      <td>0.985501</td>\n",
       "      <td>0.953488</td>\n",
       "      <td>0.945135</td>\n",
       "      <td>0.987952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bad Roommates</th>\n",
       "      <td>0.015674</td>\n",
       "      <td>0.971627</td>\n",
       "      <td>0.986301</td>\n",
       "      <td>0.946930</td>\n",
       "      <td>0.947368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weeaboo Tales</th>\n",
       "      <td>0.012539</td>\n",
       "      <td>0.979381</td>\n",
       "      <td>0.987342</td>\n",
       "      <td>0.960178</td>\n",
       "      <td>0.962963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relationships</th>\n",
       "      <td>0.006270</td>\n",
       "      <td>0.995833</td>\n",
       "      <td>0.975309</td>\n",
       "      <td>0.975309</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                      \n",
       "Tales From Tech Support    0.015674  0.985501   0.953488           0.945135   \n",
       "Bad Roommates              0.015674  0.971627   0.986301           0.946930   \n",
       "Weeaboo Tales              0.012539  0.979381   0.987342           0.960178   \n",
       "Relationships              0.006270  0.995833   0.975309           0.975309   \n",
       "\n",
       "                           Recall  \n",
       "Category                           \n",
       "Tales From Tech Support  0.987952  \n",
       "Bad Roommates            0.947368  \n",
       "Weeaboo Tales            0.962963  \n",
       "Relationships            1.000000  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_gb, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotMultiROC(clf, dfTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(clf, dfTrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style=\"color:red\">*Exercise 1*</span>\n",
    "\n",
    "<span style=\"color:red\">Go back through all of the cells above and generate 10 distinct artificial datasets and classify them with all of the available methods. Add a cell immediately below and describe which classifier(s) worked best with which artificially constructed data source and why. Then go through all of the empirical datasets (i.e., Newsgroups, Senate Small, Senate Large, Email Spam) and classify them with all available methods. Add a second cell immediately below and describe which classifier(s) worked best with which data set and why.\n",
    "\n",
    "<span style=\"color:red\">***Stretch*** (but also required) Wander through the SKLearn documentation available [here](http://scikit-learn.org/stable/), particularly perusing the classifiers. In cells following, identify and implement a new classifier that we have not yet used (e.g., AdaBoost, CART) on one artificial dataset and one real dataset (used above). Then, in the next cell describe the classifier, detail how it compares with the approaches above, and why it performed better or worse than others."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the random dataset, the algorithm that performs the best is SVM linear kernel. \\\n",
    "For the andsplit data, the algorithm that performs the best is decision tree \\\n",
    "For the xorsplit data, the algorithm that performs the best is neural network \\\n",
    "For the targetSplit data, the algorithm that performs the best is naive bayes \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Email spam dataset, the algorithm that performs the best is Naive Bayes. This because Bayesian method allows for incremental improvement in prediction.\\\n",
    "For Senate Large dataset, the algorithm that performs the best is decision trees. This is because decision trees approximates human intuition very well\\\n",
    "For Senate Small dataset, the algorithm that performs the best is Random Forest.\\\n",
    "For Newsgroups dataset, the algorithm that performs the best is SVM with linear kernel\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clinton / Obama Press Releases\n",
    "\n",
    "We often will not have nicely prepared data, so we will work though the proccess of cleaning and structuring in more detail here:\n",
    "\n",
    "While the Clinton and Obama Senatorial Press Releases are not hand-coded, we can imagine that we have been given a stack of such press releases, but lost the metadata associated with which senatorial office issued which. If we label a few of them, how well can our classifier do at recovering the rest? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "ObamaClintonReleases = pandas.read_csv('../data/ObamaClintonReleases.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1709"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ObamaClintonReleases)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's turn the 'targetSenator' column into a binary category variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ObamaClintonReleases['category'] = [s == 'Obama' for s in ObamaClintonReleases['targetSenator']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tokenize and normalize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "ObamaClintonReleases['tokenized_text'] = ObamaClintonReleases['text'].apply(lambda x: lucem_illud_2020.word_tokenize(x))\n",
    "ObamaClintonReleases['normalized_text'] = ObamaClintonReleases['tokenized_text'].apply(lambda x: lucem_illud_2020.normalizeTokens(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's split the data into training data and testing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "holdBackFraction = .2\n",
    "train_data_df, test_data_df = lucem_illud_2020.trainTestSplit(ObamaClintonReleases, holdBackFraction=holdBackFraction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1368\n",
      "341\n"
     ]
    }
   ],
   "source": [
    "print(len(train_data_df))\n",
    "print(len(test_data_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's try with a logistic regression, which may be familiar to you from statistical methods classes. First, we must turn the training dataset into a tf-idf matrix (`lucem_illud_2020.generateVecs()` will help with this but for now we are doing it the long way):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "TFVectorizer = sklearn.feature_extraction.text.TfidfVectorizer(max_df=100, min_df=2, stop_words='english', norm='l2')\n",
    "TFVects = TFVectorizer.fit_transform(train_data_df['text'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we can use the CountVectorizer instead, which simply produces a matrix of word counts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1368, 11065)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TFVects.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can save this in the dataframe to make things easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_df['vect'] = [np.array(v).flatten() for v in TFVects.todense()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a regression, we cannot have more variables than cases. So, we need to first do a dimension reduction. First, we will approah this with PCA. You have previously seen this in week 3. Here we are not concerned about visualization, but rather classification and so all principal components are calculated. Watch out: we have to use `stack` not `sum` for combining the vectors. We note that you could also use topic loading and embedding dimensions as featured variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = sklearn.decomposition.PCA()\n",
    "reduced_data = pca.fit_transform(np.stack(train_data_df['vect'], axis=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can store the PCA space vectors in the dataframe too:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_df['pca'] = [r for r in reduced_data]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualization in 2D:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (10,10))\n",
    "ax.axis('off')\n",
    "pallet = seaborn.color_palette(palette='coolwarm', n_colors = 2)\n",
    "\n",
    "#Plot Obama\n",
    "a = np.stack(train_data_df[train_data_df['category']]['pca'])\n",
    "ax.scatter(a[:,0], a[:, 1], c = pallet[0], label = \"True\")\n",
    "\n",
    "#Plot not Obama\n",
    "a = np.stack(train_data_df[train_data_df['category'].eq(False)]['pca'])\n",
    "ax.scatter(a[:,0], a[:, 1], c = pallet[1], label = \"False\")\n",
    "    \n",
    "ax.legend(loc = 'upper right', title = 'Is Obama')\n",
    "plt.title('True Classes, Training Set')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PCA cannot distinguish Obama very well. Let's perform a screeplot to see how many Principal Components we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = len(train_data_df)\n",
    "\n",
    "fig, (ax1, ax2, ax3) = plt.subplots(ncols=3, figsize = (16, 5), sharey=True)\n",
    "\n",
    "eigen_vals = np.arange(n) + 1\n",
    "ax1.plot(eigen_vals, pca.explained_variance_ratio_, 'ro-', linewidth=1)\n",
    "ax1.set_title('Scree Plot (Full)')\n",
    "ax1.set_xlabel('Principal Component')\n",
    "ax1.set_ylabel('Proportion of Explained Variance')\n",
    "\n",
    "eigen_vals = np.arange(50) + 1\n",
    "ax2.plot(eigen_vals, pca.explained_variance_ratio_[:50], 'ro-', linewidth=1)\n",
    "ax2.set_title('Scree Plot (First 50 Principal Components)')\n",
    "ax2.set_xlabel('Principal Component')\n",
    "ax2.set_ylabel('Proportion of Explained Variance')\n",
    "\n",
    "\n",
    "eigen_vals = np.arange(20) + 1\n",
    "ax3.plot(eigen_vals, pca.explained_variance_ratio_[:20], 'ro-', linewidth=2)\n",
    "ax3.set_title('Scree Plot (First 50 Principal Components)')\n",
    "ax3.set_xlabel('Principal Component')\n",
    "ax3.set_ylabel('Proportion of Explained Variance')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's choose the first 10 pricipal components as our covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_df['pca_reduced_10'] = train_data_df['pca'].apply(lambda x: x[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we fit a logistic regression to our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic = sklearn.linear_model.LogisticRegression()\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_10'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see how the logistic regression performs on the training dataset from which we develop the model. Unfortunately, the mean accuracy is only about 64%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6922514619883041"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic.score(np.stack(train_data_df['pca_reduced_10'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How does it perform on the testing dataset, which we \"held out\" and did not use for model training? We need to repeat all the steps on the testing data, but without retraining:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6480938416422287"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create vectors\n",
    "TFVects_test = TFVectorizer.transform(test_data_df['text'])\n",
    "test_data_df['vect'] = [np.array(v).flatten() for v in TFVects_test.todense()]\n",
    "\n",
    "#PCA\n",
    "reduced_data_test = pca.transform(np.stack(test_data_df['vect'], axis=0))\n",
    "test_data_df['pca'] = [r for r in reduced_data_test]\n",
    "test_data_df['pca_reduced_10'] = test_data_df['pca'].apply(lambda x: x[:10])\n",
    "\n",
    "#Test\n",
    "logistic.score(np.stack(test_data_df['pca_reduced_10'], axis=0), test_data_df['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Slightly poorer. How about using more dimensions (40)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.7448830409356725\n",
      "Testing:\n",
      "0.6862170087976539\n"
     ]
    }
   ],
   "source": [
    "train_data_df['pca_reduced_40'] = train_data_df['pca'].apply(lambda x: x[:40])\n",
    "test_data_df['pca_reduced_40'] = test_data_df['pca'].apply(lambda x: x[:40])\n",
    "\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_40'], axis=0), train_data_df['category'])\n",
    "\n",
    "print(\"Training:\")\n",
    "print(logistic.score(np.stack(train_data_df['pca_reduced_40'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(logistic.score(np.stack(test_data_df['pca_reduced_40'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or still more (100)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.8355263157894737\n",
      "Testing:\n",
      "0.7478005865102639\n"
     ]
    }
   ],
   "source": [
    "train_data_df['pca_reduced_100'] = train_data_df['pca'].apply(lambda x: x[:100])\n",
    "test_data_df['pca_reduced_100'] = test_data_df['pca'].apply(lambda x: x[:100])\n",
    "\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_100'], axis=0), train_data_df['category'])\n",
    "\n",
    "print(\"Training:\")\n",
    "print(logistic.score(np.stack(train_data_df['pca_reduced_100'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(logistic.score(np.stack(test_data_df['pca_reduced_100'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or even more (200)!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.8654970760233918\n",
      "Testing:\n",
      "0.7976539589442815\n"
     ]
    }
   ],
   "source": [
    "train_data_df['pca_reduced_200'] = train_data_df['pca'].apply(lambda x: x[:200])\n",
    "test_data_df['pca_reduced_200'] = test_data_df['pca'].apply(lambda x: x[:200])\n",
    "\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_200'], axis=0), train_data_df['category'])\n",
    "\n",
    "print(\"Training:\")\n",
    "print(logistic.score(np.stack(train_data_df['pca_reduced_200'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(logistic.score(np.stack(test_data_df['pca_reduced_200'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is becoming ridiculous (400)!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.9144736842105263\n",
      "Testing:\n",
      "0.8035190615835777\n"
     ]
    }
   ],
   "source": [
    "train_data_df['pca_reduced_400'] = train_data_df['pca'].apply(lambda x: x[:400])\n",
    "test_data_df['pca_reduced_400'] = test_data_df['pca'].apply(lambda x: x[:400])\n",
    "\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_400'], axis=0), train_data_df['category'])\n",
    "\n",
    "print(\"Training:\")\n",
    "print(logistic.score(np.stack(train_data_df['pca_reduced_400'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(logistic.score(np.stack(test_data_df['pca_reduced_400'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing the number of covariates would overfit our data, and it seems that using a logistic regression, our prediction accuracy is at best about 65%. We can, however, try a logistic regression that uses the TF-IDF scores for each word, but with an L1 regularization or L1-norm loss function, which is also known as least absolute deviations (LAD), least absolute errors (LAE) or L1 penalty. It minimizes the sum of the absolute differences (S) between the target value ($Y_i$) and the estimated values ($f(x_i)$) and prunes all insignificant variables (i.e., word TF-IDF scores):\n",
    "\n",
    "$S=\\sum^n_{i=1}|y_i=f(x_i)|$\n",
    "\n",
    "The result is a model retaining only the most individually significant features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9671052631578947\n"
     ]
    }
   ],
   "source": [
    "logistic_l1= sklearn.linear_model.LogisticRegression(penalty='l2')\n",
    "logistic_l1.fit(np.stack(train_data_df['vect'], axis=0), train_data_df['category'])\n",
    "print(logistic_l1.score(np.stack(train_data_df['vect'], axis=0), train_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train the model using training data, and then test it on the testing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8299120234604106\n"
     ]
    }
   ],
   "source": [
    "print(logistic_l1.score(np.stack(test_data_df['vect'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "81% accuracy seems like the best we can get by using a logistic regression.\n",
    "\n",
    "Now let's try with Naive Bayes. Classically, it is trained with word counts, but TF-IDF vectors are also quite good:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "naiveBayes = sklearn.naive_bayes.BernoulliNB()\n",
    "naiveBayes.fit(np.stack(train_data_df['vect'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.9495614035087719\n",
      "Testing:\n",
      "0.8299120234604106\n"
     ]
    }
   ],
   "source": [
    "print(\"Training:\")\n",
    "print(naiveBayes.score(np.stack(train_data_df['vect'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(naiveBayes.score(np.stack(test_data_df['vect'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A bit better than the logit, but that's just looking at the accuracy. What about other measures? Let's first save the predictions in the dataframe to save use rerunning the model every time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data_df['nb_predict'] = naiveBayes.predict(np.stack(test_data_df['vect'], axis=0))\n",
    "test_data_df['nb_predict_prob_true'] = naiveBayes.predict_proba(np.stack(test_data_df['vect'], axis=0))[:,0] #other is prop false"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Precision:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8088235294117647"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.precision_score(test_data_df['category'], test_data_df['nb_predict'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7746478873239436"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.recall_score(test_data_df['category'], test_data_df['nb_predict'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "F1-measure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7913669064748201"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.f1_score(test_data_df['category'], test_data_df['nb_predict'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a look at how well our posterior distribution looks relative to the truth."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.grid(False)\n",
    "ax.set_frame_on(False)\n",
    "test_data_df[test_data_df['category'].eq(True)]['nb_predict_prob_true'].hist(alpha = 0.5, ax = ax, bins = 10, label = 'True', color = 'red')\n",
    "test_data_df[test_data_df['category'].eq(False)]['nb_predict_prob_true'].hist(alpha = 0.5, ax = ax, bins = 10, label = 'False', color = 'blue')\n",
    "ax.set_xlim((0,1.1))\n",
    "ax.legend(title = \"Is Obama\")\n",
    "ax.set_xlabel('posterior')\n",
    "ax.set_ylabel('counts')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classification is suprisingly accurate. We can even look at what words are most influential with a bit of simple math:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Obama</th>\n",
       "      <th>Obama_log_prob</th>\n",
       "      <th>Clinton</th>\n",
       "      <th>Clinton_log_prob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>yorkers</td>\n",
       "      <td>-2.073234</td>\n",
       "      <td>dick</td>\n",
       "      <td>-1.822092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>signature</td>\n",
       "      <td>-2.188545</td>\n",
       "      <td>amy</td>\n",
       "      <td>-1.855244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>welcomed</td>\n",
       "      <td>-2.222447</td>\n",
       "      <td>brundage</td>\n",
       "      <td>-1.925040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>island</td>\n",
       "      <td>-2.306328</td>\n",
       "      <td>chicago</td>\n",
       "      <td>-1.949431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fy</td>\n",
       "      <td>-2.357621</td>\n",
       "      <td>temporary</td>\n",
       "      <td>-2.095385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>urging</td>\n",
       "      <td>-2.357621</td>\n",
       "      <td>location</td>\n",
       "      <td>-2.169493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>read</td>\n",
       "      <td>-2.397895</td>\n",
       "      <td>cases</td>\n",
       "      <td>-2.249536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>honor</td>\n",
       "      <td>-2.425675</td>\n",
       "      <td>quickly</td>\n",
       "      <td>-2.266343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ground</td>\n",
       "      <td>-2.454248</td>\n",
       "      <td>don</td>\n",
       "      <td>-2.283437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>supporting</td>\n",
       "      <td>-2.454248</td>\n",
       "      <td>reported</td>\n",
       "      <td>-2.283437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>urban</td>\n",
       "      <td>-2.454248</td>\n",
       "      <td>dirksen</td>\n",
       "      <td>-2.300829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>welcome</td>\n",
       "      <td>-2.468847</td>\n",
       "      <td>reform</td>\n",
       "      <td>-2.300829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>association</td>\n",
       "      <td>-2.483662</td>\n",
       "      <td>representative</td>\n",
       "      <td>-2.300829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>entire</td>\n",
       "      <td>-2.483662</td>\n",
       "      <td>va</td>\n",
       "      <td>-2.300829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>improvements</td>\n",
       "      <td>-2.498700</td>\n",
       "      <td>oil</td>\n",
       "      <td>-2.318529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Obama  Obama_log_prob         Clinton  Clinton_log_prob\n",
       "0        yorkers       -2.073234            dick         -1.822092\n",
       "1      signature       -2.188545             amy         -1.855244\n",
       "2       welcomed       -2.222447        brundage         -1.925040\n",
       "3         island       -2.306328         chicago         -1.949431\n",
       "4             fy       -2.357621       temporary         -2.095385\n",
       "5         urging       -2.357621        location         -2.169493\n",
       "6           read       -2.397895           cases         -2.249536\n",
       "7          honor       -2.425675         quickly         -2.266343\n",
       "8         ground       -2.454248             don         -2.283437\n",
       "9     supporting       -2.454248        reported         -2.283437\n",
       "10         urban       -2.454248         dirksen         -2.300829\n",
       "11       welcome       -2.468847          reform         -2.300829\n",
       "12   association       -2.483662  representative         -2.300829\n",
       "13        entire       -2.483662              va         -2.300829\n",
       "14  improvements       -2.498700             oil         -2.318529"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top indices\n",
    "trueVals, falseVals = naiveBayes.feature_log_prob_\n",
    "\n",
    "words_dict = {\n",
    "    'Obama' : [],\n",
    "    'Obama_log_prob' : [],\n",
    "    'Clinton' : [],\n",
    "    'Clinton_log_prob' : [],\n",
    "}\n",
    "\n",
    "for i, prob in sorted(enumerate(trueVals), key = lambda x:x[1], reverse=True)[:15]:\n",
    "    words_dict['Obama'].append(TFVectorizer.get_feature_names()[i])\n",
    "    words_dict['Obama_log_prob'].append(prob)\n",
    "\n",
    "for i, prob in sorted(enumerate(falseVals), key = lambda x:x[1], reverse=True)[:15]:\n",
    "    words_dict['Clinton'].append(TFVectorizer.get_feature_names()[i])\n",
    "    words_dict['Clinton_log_prob'].append(prob)\n",
    "    \n",
    "pandas.DataFrame(words_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multinomial Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What if we want to classify our text into one of *many* classes? The multinomial Naive Bayes generating model assumes that document features (e.g., words) are generated by draws from a multinomial distribution (recall this gives the probability to observe a particular pattern of counts across features). \n",
    "\n",
    "Let's use again the dataset we used in week 3, the 20 newsgroup dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alt.atheism',\n",
       " 'comp.graphics',\n",
       " 'comp.os.ms-windows.misc',\n",
       " 'comp.sys.ibm.pc.hardware',\n",
       " 'comp.sys.mac.hardware',\n",
       " 'comp.windows.x',\n",
       " 'misc.forsale',\n",
       " 'rec.autos',\n",
       " 'rec.motorcycles',\n",
       " 'rec.sport.baseball',\n",
       " 'rec.sport.hockey',\n",
       " 'sci.crypt',\n",
       " 'sci.electronics',\n",
       " 'sci.med',\n",
       " 'sci.space',\n",
       " 'soc.religion.christian',\n",
       " 'talk.politics.guns',\n",
       " 'talk.politics.mideast',\n",
       " 'talk.politics.misc',\n",
       " 'talk.religion.misc']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsgroups = sklearn.datasets.fetch_20newsgroups(data_home = '../data') #Free data to play with: documents from a newsgroup corpus.\n",
    "newsgroups.target_names #Possible categories, i.e., the newsgroups"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can pick specific categories, and pull the relevant training and testing sets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading data for: talk.religion.misc\n",
      "Loading data for: soc.religion.christian\n",
      "Loading data for: sci.space\n",
      "Loading data for: comp.graphics\n"
     ]
    }
   ],
   "source": [
    "target_categories = ['talk.religion.misc', 'soc.religion.christian', 'sci.space', 'comp.graphics'] #Can change these of course\n",
    "\n",
    "newsgroupsDF = pandas.DataFrame(columns = ['text', 'category', 'source_file'])\n",
    "for category in target_categories:\n",
    "    print(\"Loading data for: {}\".format(category))\n",
    "    ng = sklearn.datasets.fetch_20newsgroups(categories = [category], remove=['headers', 'footers', 'quotes'], data_home = '../data')\n",
    "    newsgroupsDF = newsgroupsDF.append(pandas.DataFrame({'text' : ng.data, 'category' : [category] * len(ng.data), 'source_file' : ng.filenames}), ignore_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to tokenize, and make a training and testing set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "newsgroupsDF['tokenized_text'] = newsgroupsDF['text'].apply(lambda x: lucem_illud_2020.word_tokenize(x))\n",
    "newsgroupsDF['normalized_text'] = newsgroupsDF['tokenized_text'].apply(lambda x: lucem_illud_2020.normalizeTokens(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "holdBackFraction = .2\n",
    "train_ng_df, test_ng_df = lucem_illud_2020.trainTestSplit(newsgroupsDF, holdBackFraction=holdBackFraction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1723\n",
      "430\n"
     ]
    }
   ],
   "source": [
    "print(len(train_ng_df))\n",
    "print(len(test_ng_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to extract features from the text. We can use built-in feature extraction to do so. We will use a tf-idf vectorizer, which converts the document into a vector of words with tf-idf weights (term-frequency inverse-document frequency). This gives high weight to words that show up a lot in a given document, but rarely across documents in the corpus (more distinctive). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "TFVectorizer_ng = sklearn.feature_extraction.text.TfidfVectorizer(max_df=100, min_df=2, stop_words='english', norm='l2')\n",
    "TFVects_ng = TFVectorizer_ng.fit_transform(train_ng_df['text'])\n",
    "train_ng_df['vect'] = [np.array(v).flatten() for v in TFVects_ng.todense()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can train the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MultinomialNB_ng = sklearn.naive_bayes.MultinomialNB()\n",
    "MultinomialNB_ng.fit(np.stack(train_ng_df['vect'], axis = 0), train_ng_df['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "...and save predictions to the dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score:\n",
      "0.9053975623911782\n"
     ]
    }
   ],
   "source": [
    "train_ng_df['nb_predict'] = MultinomialNB_ng.predict(np.stack(train_ng_df['vect'], axis=0))\n",
    "print(\"Training score:\")\n",
    "print(MultinomialNB_ng.score(np.stack(train_ng_df['vect'], axis=0), train_ng_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>nb_predict</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>637</th>\n",
       "      <td>soc.religion.christian</td>\n",
       "      <td>soc.religion.christian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>sci.space</td>\n",
       "      <td>sci.space</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1500</th>\n",
       "      <td>sci.space</td>\n",
       "      <td>sci.space</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>soc.religion.christian</td>\n",
       "      <td>soc.religion.christian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2029</th>\n",
       "      <td>comp.graphics</td>\n",
       "      <td>comp.graphics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>sci.space</td>\n",
       "      <td>sci.space</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>sci.space</td>\n",
       "      <td>sci.space</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1936</th>\n",
       "      <td>comp.graphics</td>\n",
       "      <td>comp.graphics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>soc.religion.christian</td>\n",
       "      <td>soc.religion.christian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1952</th>\n",
       "      <td>comp.graphics</td>\n",
       "      <td>comp.graphics</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    category              nb_predict\n",
       "637   soc.religion.christian  soc.religion.christian\n",
       "1238               sci.space               sci.space\n",
       "1500               sci.space               sci.space\n",
       "565   soc.religion.christian  soc.religion.christian\n",
       "2029           comp.graphics           comp.graphics\n",
       "986                sci.space               sci.space\n",
       "1406               sci.space               sci.space\n",
       "1936           comp.graphics           comp.graphics\n",
       "497   soc.religion.christian  soc.religion.christian\n",
       "1952           comp.graphics           comp.graphics"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_ng_df[['category', 'nb_predict']][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks pretty good, lets examine the testing dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing score:\n",
      "0.786046511627907\n"
     ]
    }
   ],
   "source": [
    "#Create vectors\n",
    "TFVects_test = TFVectorizer_ng.transform(test_ng_df['text'])\n",
    "test_ng_df['vect'] = [np.array(v).flatten() for v in TFVects_test.todense()]\n",
    "\n",
    "#Add to df\n",
    "test_ng_df['nb_predict'] = MultinomialNB_ng.predict(np.stack(test_ng_df['vect'], axis=0))\n",
    "\n",
    "#Test\n",
    "print(\"Testing score:\")\n",
    "print(MultinomialNB_ng.score(np.stack(test_ng_df['vect'], axis=0), test_ng_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can even use a confusion matrix, like we used last week for evaluating human coders relative to one another. Now we are evaluating our classifier relative to human coding. We'll just use the one in `lucem_illud_2020`, which requres a classifier and a dataframe with `'vect'` and `'category'` columns, like we have in the examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWUAAAF1CAYAAAAwU/sgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3dd3hUZfrG8e+dEAggiIiCqIhiwQoKKNgoioUVy+qCK/bCirqr7s+yrq69u+va29qwYK9UcUFBVHoHWRURpajYQJASkuf3xznBISSTgSnnJHk+18WVOWXm3BPgmXfe8573yMxwzjkXD3lRB3DOOfcbL8rOORcjXpSdcy5GvCg751yMeFF2zrkY8aLsnHMx4kXZuSyQVFfSQElLJb2Sxuv0kTQ8k9miIGmopDOizlEVeFF2NZqkUyRNlLRc0uKweBycgZc+CWgKbGlmf9jUFzGz583siAzkWY+kLpJM0utl1rcJ17+f4utcL+m5yvYzs6PNrP8mxq1RvCi7GkvSX4F7gFsJCmgL4CHguAy8/A7Ap2a2NgOvlS1LgAMlbZmw7gzg00wdQAGvMxvBf1muRpK0OXAjcKGZvW5mK8ysyMwGmtnl4T51JN0jaVH45x5JdcJtXSQtkPR/kr4LW9lnhdtuAK4Feoct8HPKtigltQxbpLXC5TMlfSHpF0nzJPVJWD8m4XkHSpoQdotMkHRgwrb3Jd0k6cPwdYZLapLk17AGeBM4OXx+PtALeL7M7+peSV9LWiZpkqRDwvVHAX9PeJ/TEnLcIulD4Fdgp3DdueH2hyW9mvD6d0gaIUkp/wVWY16UXU3VCSgE3kiyz9VAR6At0AbYH7gmYXszYHNgW+Ac4EFJW5jZdQSt75fMbDMzeyJZEEn1gfuAo82sAXAgMLWc/RoDg8N9twTuBgaXaemeApwFbA3UBi5LdmzgGeD08PGRwCxgUZl9JhD8DhoDA4BXJBWa2bAy77NNwnNOA/oCDYD5ZV7v/4B9wg+cQwh+d2eYz/kAeFF2NdeWwPeVdC/0AW40s+/MbAlwA0GxKVUUbi8ysyHAcmC3TcxTAuwlqa6ZLTazWeXs8zvgMzN71szWmtkLwBygZ8I+T5nZp2a2EniZoJhWyMw+AhpL2o2gOD9Tzj7PmdkP4TH/BdSh8vf5tJnNCp9TVOb1fgVOJfhQeQ74s5ktqOT1agwvyq6m+gFoUtp9UIHmrN/Kmx+uW/caZYr6r8BmGxvEzFYAvYHzgcWSBktqnUKe0kzbJix/swl5ngUuArpSzjeHsIvmk7DL5GeCbwfJukUAvk620czGA18AIvjwcCEvyq6m+hhYBRyfZJ9FBCfsSrVgw6/2qVoB1EtYbpa40czeMbPuwDYErd//pJCnNNPCTcxU6lngAmBI2IpdJ+xeuJKgr3kLM2sELCUopgAVdTkk7YqQdCFBi3sRcMWmR69+vCi7GsnMlhKcjHtQ0vGS6kkqkHS0pDvD3V4ArpG0VXjC7FqCr9ubYipwqKQW4UnGq0o3SGoq6diwb3k1QTdIcTmvMQTYNRzGV0tSb2APYNAmZgLAzOYBnQn60MtqAKwlGKlRS9K1QMOE7d8CLTdmhIWkXYGbCbowTgOukJS0m6Um8aLsaiwzuxv4K8HJuyUEX7kvIhiRAEHhmAhMB2YAk8N1m3Ksd4GXwteaxPqFNI/g5Nci4EeCAnlBOa/xA3BMuO8PBC3MY8zs+03JVOa1x5hZed8C3gGGEgyTm0/w7SKxa6L0wpgfJE2u7Dhhd9FzwB1mNs3MPiMYwfFs6ciWmk5+wtM55+LDW8rOORcjXpSdcy5GvCg751yMeFF2zrkY8aLsnHMxkuxqJlcDrXzqimo5HGeLfi9GHSFr8vOqZ9tq9dqiyneqotauWVjh5EvV82/TOeeqKC/KzjkXI16UnXMuRrwoO+dcjHhRds65GPGi7JxzMeJF2TnnYsSLsnPOxYgXZeecixEvys45FyNelJ1zLka8KDvnXIx4UXbOuRjxouycczHiRdk552LEi7JzzsWIF2XnnIsRL8rOORcjXpSdcy5GvCg751yMeFF2zrkY8btZu6y5bvAURs/9hsb16vDaud0AWLpyDVe8NZFFS3+l+eb1uOv49jQsrM3H877jvvdnU1RSQkFeHpd23ZP9W24V8TvYeNtttw1PPPFvmjbdipIS44knBvDgg09GHSttderUYfi7L1Gndh3ya+Xz5ptDueXmf0cdKyOOPKILd999I/l5eTz51AvcedeDkebxlnKOSGov6b6oc+TSsXtvz0O9Oq237smxn3HADk0Y+KfDOWCHJjz58WcAbFG3NveedACvntONm47Zj6sHTY4ictrWri3myitvpm3bwzj00OM4//zTad16l6hjpW316tX0OPoUOnY8mk4de9C9e2c6dNg36lhpy8vL4757b+GYnqeyd5uu9O59PLvvHu3flxflHDGziWb2l6hz5FK7Fk1oWFh7vXXvf7aYnnu3AKDn3i1477PFALRu1oitG9QFoFWTBqxZW8yatcW5DZwB33zzHVOnzgRg+fIVzJnzOdtu2yziVJmxYsWvABQU1KKgoBaGRZwofft32Je5c79k3ryvKCoq4uWX3+LYnkdGmsmLcpok1Zc0WNI0STMl9ZbUQdJH4brxkhpI6iJpUDnP30bSaElTw+cfEq5fLulfkiZLGiFpq3D9eZImhK/9mqR64fqmkt4I10+TdGC4/tQww1RJj0rKz+Xvp6wfVqxmq80KAdhqs0J+XLFmg33++7/FtG66ObVrRRo1bTvssB1t2+7J+PFToo6SEXl5eXw8dghfzp/EyBFjmDhhatSR0tZ822Z8vWDRuuUFCxfTvHm0H6JelNN3FLDIzNqY2V7AMOAl4GIzawMcDqxM8vxTgHfMrC3QBij9l14fmGxm+wGjgOvC9a+bWYfwtT8BzgnX3weMCtfvB8yStDvQGzgofP1ioE9G3nWWfL5kGfe+P4trjmobdZS01K9fjxdeeJTLLruBX35ZHnWcjCgpKaFTxx7suksn2rVvwx577Bp1pLRJ2mCdWbTfALwop28GcLikO8JWbgtgsZlNADCzZWa2NsnzJwBnSboe2NvMfgnXlxAUd4DngIPDx3tJ+kDSDIICu2e4vhvwcHjMYjNbChwGtAMmSJoaLu9UNoCkvpImSpr4xPvTNuFXkLot69dhyfJVACxZvorG9X/r3vh22Ur++vp4bjpmP7bfon5Wc2RTrVq1ePHFR3nxxTd4661hUcfJuKVLl/HBB2Pp3r1z1FHStnDBYrbfrvm65e223YbFi7+NMJEX5bSZ2acEhW8GcBtwAqTe2WZmo4FDgYXAs5JOr2jX8OfTwEVmtjdwA1CY5OUF9DeztuGf3czs+nIyPGZm7c2s/Tld2qQafZN03nkbBs74CoCBM76iyy7bALBsVRF/fmUsf+m8B/tut2VWM2Tbo4/exZw5n3PffY9HHSVjmjRpzOabNwSgsLAOXbsexP8+nRtxqvRNmDiVnXfekZYtt6egoIBevY5j4KDhkWbyopwmSc2BX83sOeCfQEeguaQO4fYGkioceihpB+A7M/sP8ARB1wMEfzcnhY9PAcaEjxsAiyUVsH5XxAigX/ia+ZIahutOkrR1uL5xeLyc+NtbEznj2dHM/3E5Rzz4Dm9Mm8/ZnXZh7JdL6Pnofxn75RLO7hic6X5p0hd89fMKHvvof/R68j16PfkeP65YnauoGXPggR3o0+dEunQ5kHHjhjJu3FCOPLJr1LHS1qzZ1gwd9gLjxg3lgw/eZuTIMQwbOjLqWGkrLi7m4kuuYcjgAcyc/j6vvjqQ2bM/jTSTou4/qeokHQncRdDdUERQGAXcD9Ql6E8+HGgPXGZmx0hqD5xvZudKOgO4PHzucuB0M5snaTnwb6AHsBTobWZLJPUDrgDmE7TOG5jZmZKaAo8RdE8UA/3M7GNJvYGrCIp8EXChmY2t6P2sfOqKavkPYot+L0YdIWvy86pn22r12qKoI2TN2jULN+zMDnlRjilJy81ss1wf14ty1eNFuepJVpSr59+mc85VUV6UYyqKVrJzLnpelJ1zLka8KDvnXIx4UXbOuRjxouycczHiRdk552LEi7JzzsWIF2XnnIsRL8rOORcjXpSdcy5GvCg751yMeFF2zrkY8aLsnHMx4kXZOedixIuyc87FiBdl55yLES/KzjkXI16UnXMuRrwoO+dcjHhRds65GPGi7JxzMSKzanlHebeJ9mx6QLX8BzH+ktZRR8iatnfPjDpCVsxb+k3UEbJm7ZqFqmibt5Sdcy5GvCg751yMeFF2zrkY8aLsnHMx4kXZOedixIuyc87FiBdl55yLES/KzjkXI16UnXMuRrwoO+dcjHhRds65GPGi7JxzMeJF2TnnYsSLsnPOxYgXZeecixEvys45FyNelJ1zLkZqVbRBUuNkTzSzHzMfxznnarYKizIwCTCgvNuWGLBTVhI551wNVmFRNrMdcxnEOedcCn3KCpwq6R/hcgtJ+2c/mnPO1TypnOh7COgEnBIu/wI8mLVEzjlXg6VSlA8wswuBVQBm9hNQO6upXLVz0z3XMHrWUN4cNWCDbWf268Osb8fRqPHmESRLX6323al77i3UPfdWanU4AoCCg4+n7kX3UHj2jRSefSP5rfaJOOXGu+3eaxk7+10Gj35p3borr7uYYR+9xsD3X+TBp/9Jg4abRZgwM448oguzZo5mzuwxXHH5hVHHSakoF0nKJzi5h6StgJKspnLrkfS0pJPKWd9c0qtRZNpYb744iD+dfMkG65s135oDO+/Poq8XR5AqfWqyLQVtu7Dy6RtY+cQ11GrVFm3RFICi8e+w6slrWfXktRTPnR5x0o33+osDOfvkP6+37sNR4/jdIb3o2eVkvpw7n/MvPiuidJmRl5fHfffewjE9T2XvNl3p3ft4dt99l2gzpbDPfcAbQFNJtwBjgFuzmqqaCvvnMzY23MwWmdkGxTqOJo2dytKfl22w/sobL+VfNz6AmUWQKn15TZpTvHAurF0DVkLx13OotWu7qGNlxISPp7D0p6XrrRvz/liKi4sBmDppJs2aN40iWsbs32Ff5s79knnzvqKoqIiXX36LY3seGWmmSguEmT0PXEFQiBcBx5vZK9kOlg5Jp0uaLmmapGcl7SBpRLhuhKQW4X5PS3pY0nuSvpDUWdKTkj6R9HTC6y2X9C9Jk8Pnb1XOMbeS9G64z6OS5ktqIqll+HoPAZOB7cNjTpQ0S9INCa/xpaQ7JI0P/+yccIhDJX0U5jwp3L+lpJnh43xJ/5Q0I3yffw7X3y5pdrjun9n4fW+qrkcewrffLOF/sz+LOsomK1mygPwWu0Hd+lCrNvmt2qCGwRD/gnaHUfecm6nd4xworBdx0sw76ZRjGTXiw6hjpKX5ts34esGidcsLFi6mefNmESZKPk45UT2gtAujbvbipE/SnsDVwEFm9n14EUx/4Bkz6y/pbILW//HhU7YAugHHAgOBg4BzgQmS2prZVKA+MNnM/k/StcB1wEVlDn0dMNLMbpN0FNA3YdtuwFlmdkGY8Woz+zHsFhohaR8zK/1+u8zM9pd0OnAPcEy4fhvgYKA18DZQttuiL7AjsK+ZrZXUOHzvJwCtzcwkNdrY32e2FNatQ99LzuS8Xn+JOkpa7IfFFH08mMKTr4A1qyn59isoKaFo8kiKPnwLDAoO/T21u/2RNUOeiDpuxvS79GzWri3m7VeHRh0lLdKGl2FE/a0tlSFx1xIUtcZAE+ApSddkO1gaugGvmtn3sO7Kw05A6RmmZwmKW6mBFvwtzAC+NbMZZlYCzAJahvuUAKVnO54r8/xSBwMvhsccBvyUsG2+mY1NWO4laTIwBdgT2CNh2wsJPzslrH/TzErMbDZQ3nfGw4FHzGxtwvteRnCC9nFJvwd+Led5SOobttwn/rTyu/J2ybjtW27Hti2a8/rI5xg+4Q2aNt+aV999hiZbJb2QNJbWTh/NqqeuY9Xzt2KrVlDy0zfw6zIwA4y100aR37z6XGt1Qu9j6Nr9EP6vX5zLQGoWLljM9ts1X7e83bbbsHjxtxEmSq1P+Y9ABzO73syuAzoCfbIbKy0iPCmZROL21eHPkoTHpcsVfZMo7/XLu/Kx1Ip1O0k7ApcBh5nZPsBgoLCC1y4vZ0XH2uB9hwV6f+A1gm8Gw8oLZ2aPmVl7M2u/Rd2tk7yNzPnsk7kcuufRHNHhBI7ocALfLvqOk7qfzvdLquDV+/UaAKCGjam1WzvWzh6L6v82kiR/13aULFkQVbqMOqRbJ/r++QzOP+1SVq1cFXWctE2YOJWdd96Rli23p6CggF69jmPgoOGRZkql++JLgqJR+jdQB5ibrUAZMAJ4Q9K/zeyH8Cv8R8DJBK3kPgQnKzdGHnASQUv4lAqePwboBdwh6QiCbpHyNCQo0kslNQWOBt5P2N4buD38+fFGZBwOnC/p/dLuC2ANUM/MhkgaC3y+Ea+XUXc9chMdDtyPRo0bMWLKQB686zFeHzAwqjgZVfj7P6O6m2HFxax+51lY9Su1e/Ylb+sWAJQs/Z41Q5+KOOXG+/ejt7D/Qe3ZonEjPpg2hHvvfJTzLz6L2rULePrVhwCYOnEG115+W8RJN11xcTEXX3INQwYPID8vj6f7v8Ts2Z9GminZhET3E7S8VgOzJL0bLndn44tazpjZrHCUyChJxQRdBH8BnpR0ObAE2NhxPCuAPSVNApYSFEwknR8e8xHgBuAFSb2BUcBiggtt1hvIaWbTJE0h6B75Aih7pqSOpHEEHwR/3IiMjwO7AtMlFQH/IWghvyWpkKAlfelGvF5GXX7+P5JuP6LDCTlKknmrnttwMNLqgY9FkCSzLv3T1Ruse/X5tyJIkl1Dh41k6LCRUcdYRxV1aks6I9kTzax/VhLFkKTlZpZ0lLykOkBx2ErtBDxsZm038jhfAu1L+8OjsGfTA6rm2LRKjL+kddQRsqbt3TOjjpAV85Z+E3WErFm7ZmGF3Z3JJiSqMUU3Q1oAL4fjkNcA50WcxzlXBVXapyxpF+A2ghEC605ImVn1OZ1cicpayeE+nwH7pnmcluk83zlX9aUy+uIp4GFgLdAVeIbghJlzzrkMS6Uo1zWzEQT9z/PN7HqCscDOOecyLJUhcavCftLPJF0ELARyM5jVOedqmFRaypcQXGb9F6AdcBqQdGSGc865TVNpS9nMJoQPl7Px43udc85thGQXjwwkyeXKZnZsVhI551wNlqylHKtpHp1zriZIdvHIqFwGcc45l9qJPuecczniRdk552LEi7JzzsWIj75wzrkYSWX0xe+BZgS3QYJgjt8vs5jJOedqrEpHX0i6ycwOTdg0UNLorCdzzrkaKJU+5a0krZumM7zH3FbZi+ScczVXKhMSXQq8L+mLcLkl8KesJXLOuRoslbkvhoUT3ZfeT2eOma1O9hznnHObptLuC0n1gMuBi8xsGtBC0jFZT+acczVQqnceWQN0CpcXADdnLZFzztVgFd7Net0O0kQzay9pipntG66bZmZtcpLQ5VTD+jtVy7tZF1tJ1BGy5uevRkYdISvqNj8k6ghZk+xu1qm0lNdIqkt4IYmkVoD3KTvnXBakMvriemAYsL2k54GD8MnunXMuK1IZfTFc0iSgIyDgYjP7PuvJnHOuBkpl9MUIM/vBzAab2SAz+17SiFyEc865mibZhESFBDdMbSJpC4JWMkBDoHkOsjnnXI2TrPviTwR3sm4OTOK3orwMeDDLuZxzrkZKNiHRvcC9kv5sZvfnMJNzztVYqQyJK5HUqHRB0haSLshiJuecq7FSKcrnmdnPpQtm9hNwXvYiOedczZVKUc6TtO7qE0n5QO3sRXLOuZorlYtH3gFelvQIwVV95xNcTOKccy7DUinKVxKMxOhHMAJjOPB4NkM551xNlcoVfSXAw+Ef55xzWZTs4pGXzayXpBmUc1drM9snq8mcc64GStZSvjj86RPaO+dcjiS7eGRx+HN+7uI451zNlqz74hfK6bYoZWYNs5LIOedqsGQt5QYAkm4EvgGeJRh90QdokJN0zjlXw6Ry8ciRZvaQmf1iZsvM7GHgxGwHc865miiVolwsqY+kfEl5kvoAxdkO5pxzNVEqRfkUoBfwbfjnD+E655xzGZbKxSNfAsdlP4pzzrlKi7KkXQmu5mtqZntJ2gc41sxuzno6V63l5eUxasxbLF70Lb1OOjfqOBlRp04dhr/7EnVq1yG/Vj5vvjmUW27+d9SxUnbNrXcz+sPxNN6iEW8+9wgA/3zgcUZ9OI5aBbXYftttuPnvf6Vhg80Y9M5Inhrw2rrnfjp3Hq88eT+td20VVfxNcuQRXbj77hvJz8vjyade4M67or2HRyrdF/8BrgKKAMxsOnByNkOlQ9L7ktqHj4ckzgVdwf43Sjo8F3kq2a+5pFeTbG+UOI91ZftXBf0uPItP/zc36hgZtXr1anocfQodOx5Np4496N69Mx067Bt1rJQd36M7j9y9fnurU4d9eePZR3jjmYdpuf22PP7sSwAcc2Q3Xuv/IK/1f5Dbrr2MbbdpWuUKcl5eHvfdewvH9DyVvdt0pXfv49l9912izZTCPvXMbHyZdWuzESYVCqSSGzPrkTgXdAX7XGtm/81Muk0jqZaZLTKzk5Ls1ghYV5RT2D/WmjdvxpFHdaX/0y9FHSXjVqz4FYCCgloUFNTCKh7uHzvt2+7N5g3XH/F60AHtqFUrH4B99mzNt99teDP7Ie+O4ujDO+ckYybt32Ff5s79knnzvqKoqIiXX36LY3seGWmmVIrb95JaEV5IIukkYHFlT5JUX9JgSdMkzZTUW9JhkqZImiHpSUl1wn07SPoo3He8pAZlXqulpE8kPQRMBraXdISkjyVNlvSKpM3KyfClpCbh439ImiPpXUkvSLosXP90+J5Iku9LSTeEx5ohqXUF7/mKcPs0SbcnbPpD+L4+lXRIuO+ZYe6BwPDwPc4Mt+0Z7j9V0nRJuwC3A63CdXeV2b+lpA/CfJMlHRiu7xK21F8N3/vziXNjR+n2O//BtVffTklJSdRRMi4vL4+Pxw7hy/mTGDliDBMnTI06Usa8MXg4B3fqsMH6YSNG0aN7l9wHSlPzbZvx9YJF65YXLFxM8+bNIkyUWlG+EHgUaC1pIcHNVM9P4XlHAYvMrI2Z7UUwB/PTQG8z25ugP7ufpNrAS8DFZtYGOBxYWc7r7QY8Y2b7AiuAa4DDzWw/YCLw14qChN0HJwL7Ar8HNuhOCO/evUG+hF2+D4/1MHBZOc8/GjgeOCB8H3cmbK5lZvsT/O6uS1jfCTjDzLqVebnzgXvNrG2YdQHwN2CumbU1s8vL7P8d0D3M1xu4L2HbvuFx9wB2Ag4qmz3XjjqqG98v+YGpU2dGHSUrSkpK6NSxB7vu0ol27duwxx67Rh0pIx7t/wL5+fkcc0TX9dZPnzWHuoWF7LJTy2iCpaG8NopZtN9skhblsJugvZkdDmwFtDazg1OcD2MGcLikO8LWYUtgnpl9Gm7vDxxKUGwXm9kEgPAClfK6R+ab2djwcUeCIvOhpKnAGcAOSbIcDLxlZivN7BdgYDn77FZBvlKvhz8nhe+lrMOBp8zs1/B9/JjCc98ts1+pj4G/S7oS2MHMyvuQSlQA/Cec0e8Vgt9NqfFmtiCcgnVqedkl9ZU0UdLENWuXVXKo9B3QqR1H/+4wZswezVP97+PQzp34zxN3Z/24ubZ06TI++GAs3btXva/1Zb015F1GfzieO667YoNCNvS/VbPrAmDhgsVsv13zdcvbbbsNixd/G2GiSopy+B/5ovDxirCgpSQsbu0IivNtVDysTiSZYyPBijLPeTdsNbY1sz3M7Jwkz03lK3tl+6wOfxZT/qiVZO+joueuKGdfzGwAcCzBN4Z3JJVtSZd1KcEY8jYELevE23WtTnhcbnYze8zM2ptZ+9q1sj+lyQ3X3cXuux7E3nscylln/IXRoz7mvHMq/KJTpTRp0pjNNw9+h4WFdeja9SD+92nVPpk5ZuxEnnj+Fe6/4zrqFhaut62kpITh731QZYvyhIlT2XnnHWnZcnsKCgro1es4Bg4aHmmmVO488m7Y//oSCUWkghbeOpKaAz+a2XOSlhN8JW8paWcz+xw4DRgFzAGaS+pgZhPC/uSVFbSWS40FHix9LUn1gO0SWrlljQEelXRb+J5/RzCqJNGcCvKlajhwraQBZvarpMaV/Y4qImkn4Aszuy98vA8wjYrnHNkcWGBmJZLOAPI35bgufc2abc1j//kX+Xl55OXl8drrgxk2dGTUsVJ2+XW3M2HKdH7+eRmHHX8qF5xzGo8/+xJrioo475KrgeBk33VX/BmAiVNn0nSrJmy/7TZRxt5kxcXFXHzJNQwZPID8vDye7v8Ss2dXVEZyI5WifHb488KEdUbQP5nM3sBdkkoIhtP1Iyger0iqBUwAHjGzNZJ6A/dLqkvQOjxcUkPgcTPrUfaFzWyJpDOBF0pPxhH0MZf72wyL/dsEhW0+QR/00jL7rJJ0Vtl8yd5g2Fd9vpmda2bDJLUFJkpaAwwB/l7J76givYFTJRURTAZ1o5n9KOnD8OTeUCBxMOVDwGuS/gC8RwUt8Dga88E4xnwwLuoYGTNz5hwO7PS7qGNssrtu+NsG605MMhph//32YcB/7slmpKwbOmwkQ4fF54NTUXdq54qkzcxsediqHg30NbPJUeeKm4b1d6qW/yCKrfqN8ij181fxKSiZVLf5IVFHyJq1axZW2F2ayhV9hQTjYw8maCF/QNDCXZWxhLnxmKQ9gEKgvxdk51wcpdJ98QzwC3B/uPxHgrmV/5CtUNlgZj6JknMu9lIpyruF425LvSdpWrYCOedcTZbKxSNTJHUsXZB0APBh9iI551zNlUpL+QDgdElfhcstgE/CCxXMzPbJWjrnnKthUinKR2U9hXPOOSC1Se5TuaTaOedcBqQ0BaZzzrnc8KLsnHMx4kXZOedixIuyc87FiBdl55yLES/KzjkXI16UnXMuRrwoO+dcjHhRds65GPGi7JxzMeJF2TnnYsSLsnPOxYgXZeecixEvys45FyNelJ1zLkZSmeTe1SB1a9WOOoYFObAAABsVSURBVEJW5Kn6tj+ubX9N1BGyYrcttos6QiSq779U55yrgrwoO+dcjHhRds65GPGi7JxzMeJF2TnnYsSLsnPOxYgXZeecixEvys45FyNelJ1zLka8KDvnXIx4UXbOuRjxouycczHiRdk552LEi7JzzsWIF2XnnIsRL8rOORcjXpSdcy5GvCg751yMeFF2zrkY8aLsnHMx4kXZOedixO9m7XKu1c478thTd69b3qHl9tx563089vAzEabKjL4XnM4pp52EmfHJ7E+59MKrWb16TdSxNkmtOgX0felaatWpRV5+PjOHjuO//36NZru34IRbzqF2vTr8tOB7XrrkQVYvXxl13JTddM81dO5+ED9+/xPHdz5lvW1n9uvD5df/hYN2P4Kff1waSb7Yt5QlNZJ0QQr7LQ9/dpE0KIPH/1JSk/DxRyns/7ikPTJ1/BSOd6Okw3N1vEyY+/k8DjvkBA475AS6dz6RlStXMmTQf6OOlbZm22zNOX86laO6/oGuBx5Hfn4+x53YI+pYm2zt6iIeP+Vm7jv6Ku7rcRW7dm7D9vvuzIm3n8ewO17g3qP+xqx3JnBo32OijrpR3nxxEH86+ZIN1jdrvjUHdt6fRV8vjiDVb2JflIFGQKVFeVNJyk91XzM7MIV9zjWz2emlSp2ZXWtmVbaiHdKlE1/O+5oFXy+KOkpG5OfnU1hYSH5+PnXrFvLt4u+ijpSWNb+uBiC/Vj55tfLBjCY7bcO8cXMA+HzMDPY8ukOUETfapLFTWfrzsg3WX3njpfzrxgcwswhS/aYqFOXbgVaSpkr6t6QRkiZLmiHpuGRPlNRB0hRJO5VZ30XSe5IGADPCdadKGh8e59HyinVCazxP0kOSZkkaJGmIpJPCbe9Lah8+/mOYc6akOxJfR9ItkqZJGiupaTnHOlPSm5IGSpon6SJJfw3fz1hJjcP9nk449u2SZkuaLumf4bqmkt4IjzVNUqUfLLl0wu978Marg6OOkRHfLP6ORx54iokzRzDtf6P4ZdlyRr1X6ZerWFOe+POQW7l60iN8PmYGX0+dy7efLmD37u0A2LtHRxpts2XEKdPX9chD+PabJfxv9mdRR6kSRflvwFwzawtcDpxgZvsBXYF/SVJ5TwqLzyPAcWb2RTm77A9cbWZ7SNod6A0cFB6nGOiTJNPvgZbA3sC5QKdyjt8cuAPoBrQFOkg6PtxcHxhrZm2A0cB5FRxnL+CUMOstwK9mti/wMXB6meM1Bk4A9jSzfYCbw033AaPCY+0HzEryvnKqoKCAI3p0Y+Cbw6KOkhGbb96QI3t044A23Wnbugv16tflxF49o46VFisx7u/xd27vdBHbtWlF012347UrHqPTad25aOAt1NmskOKitVHHTEth3Tr0veRMHrjj0aijAFWjKCcScKuk6cB/gW2BDVqZwO7AY0BPM/uqgtcab2bzwseHAe2ACZKmhss7VfA8gIOBV8ysxMy+Ad4rZ58OwPtmtsTM1gLPA4eG29YApf3ekwgKfHneM7NfzGwJsBQYGK6fUc5zlgGrgMcl/R74NVzfDXgYwMyKzWyDsxeS+kqaKGniyjU/J3nbmXVY90OYMW02S5b8kLNjZtMhXTrx1fyF/PDDT6xdu5YhA9+l/f5to46VEauW/cq8sZ+wa+c2LJm7iCdPv50Hel7NtLc/4of5VbuLZvuW27Fti+a8PvI5hk94g6bNt+bVd5+hyVaNI8lT1UZf9AG2AtqZWZGkL4HCcvZbHK7fF6ios3JFwmMB/c3sqhRzlNs634h9iuy3jqtiKv57WJ3wuCRhuaTsc8xsraT9CT5QTgYuIijIlTKzxwg+xGi6eeucdaidcNLvqk3XBcDCBYtp174NdesWsnLlKg7u3JFpU2LzxWSj1W/cgOK1xaxa9iu16hTQ6qC9GP3IQOpv2ZAVPyxDEl0vOoFxz1fZUxoAfPbJXA7d8+h1y8MnvEGvI8+MbPRFVSjKvwANwsebA9+FBbkrsEMFz/kZOAcYLmmFmb1fyTFGAG9J+reZfRd2BTQws/kV7D8GOENSf4IPiS7AgDL7jAPuDUdu/AT8Ebi/khybTNJmQD0zGyJpLPB5uGkE0A+4J+wnr29mG57lyLG6dQs5tOtBXHbJdVFHyZgpk6Yz6O3hDB/1KmvXFjNzxic89/TLUcfaZA22bsQf/tUP5eWhPDFj8FjmjJzCgWcdRafTugMw850JTHplVMRJN85dj9xEhwP3o1HjRoyYMpAH73qM1wcMrPyJORL7omxmP0j6UNJMYALQWtJEYCowJ8nzvpXUExgq6WyCFun5ZnZuOfvOlnQNQRHPA4qAC4GKivJrBC3SmcCnBAV4vY9VM1ss6SqCrg0BQ8zsrWTvVdKxQHszuzbZfhVoQPDBUhge79Jw/cXAY5LOIfgd9CPok47UypWr2H3HjlHHyLh/3vYA/7ztgahjZMQ3c77m/t/9fYP1Hz01jI+eqrrnAS4//x9Jtx/R4YQcJSmfoh7+UVVJ2szMlkvaEhhPcJLwm6hzpSuX3Re5lKeqdvokdWc2qh791mW9vXJu1BGyZta34yrs3ox9SznGBklqBNQGbqoOBdk5Fz0vypvIzLpEncE5V/1U3+90zjlXBXlRds65GPGi7JxzMeJF2TnnYsSLsnPOxYgXZeecixEvys45FyNelJ1zLka8KDvnXIx4UXbOuRjxouycczHiRdk552LEi7JzzsWIF2XnnIsRL8rOORcjXpSdcy5GvCg751yMeFF2zrkY8aLsnHMx4kXZOedixIuyc87FiMws6gyuBpPU18weizpHpvn7qnri8t68peyi1jfqAFni76vqicV786LsnHMx4kXZOedixIuyi1rkfXhZ4u+r6onFe/MTfc45FyPeUnbOuRjxouycczHiRdk552LEi7LLKQVOlXRtuNxC0v5R50qXpDslNZRUIGmEpO8lnRp1rkyRdKCkUySdXvon6kzpktRRUoOE5QaSDogyE/iJPpdjkh4GSoBuZra7pC2A4WbWIeJoaZE01czaSjoBOB64FHjPzNpEHC1tkp4FWgFTgeJwtZnZX6JLlT5JU4D9LCyCkvKAiWa2X5S5akV5cFcjHWBm+4X/ITCznyTVjjpUBhSEP3sAL5jZj5KizJNJ7YE9rPq14JT4nsysRFLkNdG7L1yuFUnKB0pbJ1sRtJyruoGS5hAUsBHh+1oVcaZMmQk0izpEFnwh6S9hl1OBpIuBL6IO5d0XLqck9QF6A/sB/YGTgGvM7JVIg2VA2BWzzMyKJdUHGpjZN1HnSpek94C2wHhgdel6Mzs2slAZIGlr4D6gG0EjYQRwiZl9F2kuL8ou1yS1Bg4DBIwws08ijpQ2SRcCz5vZz+HyFsAfzeyhaJOlT1Ln8tab2ahcZ6kJvCi7nJLUEZhlZr+Eyw0I+ivHRZssPaUn+sqsm2Jm+0aVySUn6U7gZmAlMAxoQ9BSfi7KXN6n7HLtYWB5wvKKcF1Vl6eEM3thv3l1OIFZOnRsgqTlktZIKpa0LOpcGXCEmS0DjgEWALsCl0cbyYuyy70NznhTPUYBvQO8LOkwSd2AFwhaX9XBA8Afgc+AusC54bqqboMRM1GGKVUd/jO4quULSX/ht9bxBcTgjHcGXAn8CehH0Fc+HHg80kQZZGafS8o3s2LgKUkfRZ0pA0pHzKwELojLiBnvU3Y5Fdcz3q5ikkYDhxN8yHwDLAbOrCYXxiSOmKkHNIx6xIwXZefSIOllM+slaQbh2OtEZrZPBLEyStIOwHcEX/cvBTYHHjKzzyMNtokkdTOzkZJ+X952M3s915kSeVF2OSWpEDgH2BMoLF1vZmdHFioNkrYxs8Vh4dqAmc3PdSaXnKQbzOw6SU+Vs9mi/rfoRdnllKRXgDnAKcCNQB/gEzO7ONJgbgM14VtAHHlRdjlVOnZX0nQz20dSAfCOmXWLOls6wq/CdwBbE5zoE0Grq2GkwdJQ3b8FSGoEnA60JGHQQ9QTLfnoC5drReHPnyXtRXDiqGV0cTLmTqBndbg6sZSZLQ4fXmBmVyZuk3QHwYiTqmwIMBaYQYzmX/GWssspSecCrwH7AE8BmwH/MLNHIw2WJkkfmtlBUefIBkmTy05nWfpNJ6pMmVDe+4oDL8rOpSHhDH5ngpnU3mT9SXsiPZOfDkn9CMaRtwISR1o0AD40syo9ib+kSwmuLh3E+n9nkV5E4kXZ5ZSkLYHrgYMITh59ANxkZj9EmWtTVXAGv1TkZ/LTIWlzYAvgNuBvCZt+ibpwZUI4idQtwM/8diLTzGyn6FJ5UXY5JuldYDRQOulLH6CLmR0eXSqXjKRWwAIzWy2pC0HX0zOlM+JVVZLmEtx04fuosyTyuS9crjU2s5vMbF7452agUdSh0iVpJ0kDJS2R9J2ktyTtGHWuDHkNKJa0M/AEsCMwINpIGTEL+DXqEGX56AuXa+9JOhl4OVw+CRgcYZ5MGQA8CJwQLp8MvAhEfiPODCgxs7Vh//k9ZnZ/6e28qrhiYGo4iX9in3KkQ+K8+8LllKRfgPoE/yFE8G1tRbi5yo7rlTTOzA4os26smXWMKlOmSBoH3ANcTTDsb56kmWa2V8TR0iLpjPLWm1n/XGdJ5EXZuQyQdDvBCaMXCU4a9QbqELSeIz+jnw5JewDnAx+b2Qtht0xvM7s94mjVkhdll1OSDgKmmtkKSacS3KvvHjP7KuJoaZE0L8nmyM/ou9RIut7Mro80gxdll0uSphPcdmcf4FmCE0e/N7Ny7wPnolMT576Q1NPMBkaawYuyy6XSq6gkXQssNLMn4npl1cYKLxvfg/Vnv3smukTpqe5zX8SVj75wufaLpKuAU4FDw3vZFVTynNiTdB3QhaAoDwGOBsYAVbYohwU5H3iiOo4jD+80ch4bTkgU6QU/Pk7Z5VpvguFH54R3eNgWuCvaSBlxEnAY8I2ZnUXQRVMn2kjpC2//9Gt4dV918xbBhP3/JRiWWfonUt5SdjkVFuK7E5a/ogq3JhOsNLMSSWslNSS4U0d1Obm3CpgRXo1ZOnwx8vG8GVCv7Ox3ceBF2UVO0mNm1jfqHGmaGM7P+x9gEsFEN+OjjZQxsWhBZsEgST3MbEjUQRL5iT4XOUntzGxS1Dk2lSQB25nZ1+FyS4IbcE6PMpdLLuFCpjX8Ns935BcweVF2LgMkTTKzdlHnyIZwbPn1wA4E365L76pSXbpnYsW7L1xOSLrHzC6RNJDyx7weG0GsTBorqYOZTYg6SBY8QXAX60kEl8dXG5KOBQ4NF983s0FR5gFvKbscKe2ikFTuRSJmNirXmTJJ0mxgV2A+wcmw0tZklb/Aorx5PaqD8NL4DsDz4ao/ApPM7G8VPyv7vCi7nJJUn3CkQricD9Qxs9hNobgxquMFFpJKL+jpBeQDr7P+bGqTo8iVKeHVpW3L/FucEvUHqXdfuFwbARxOMDoBoC4wHDgwskSZ8UuK66qSf5VZbp/w2IAqfQfyUCOgdLKoWIzF9qLscq3QzEoLMma2XFK9KANlyGRge+Angq6LRsBiSd8B51XF0SVm1jXqDFl2GzAlnE9ZBH3LV0Ubya/oc7m3IuFrMZLaAysjzJMpw4AeZtbEzLYkuMz6ZYIbjz4UabI0Sbo1HINduryFpJujzJQJZvYC0JGgW+Z1oJOZvRhtKu9TdjkWFuGXgEUEX4GbE8zNW+VakokkTTSz9uWtkzTVzNpGlS1dkqaY2b5l1lXZSaQktTazOYmNg0RR95V794XLtR2BfYEWBLdO6kg5Q+SqoB8lXUkwyT0Ec3z8FJ48KokuVkbkS6pjZqsBJNWlas/r8VegLxv2mUMM+sq9pexyStJ0M9tH0sHArQT/Mf5e1YdcSWoCXAccHK4aA9wILAVamNnnUWVLl6QrgGOBpwiK1tnA22Z2Z6TBqikvyi6nSr8KS7oNmGFmA8r7euziRdJRBKNmBAw3s3cijpS28EawZS0l+Hf5Xa7zlPKi7HJK0iBgIcF/8HYEJ/nGm1mbSINlgaS+ZvZY1Dlc+SQNBjoB74WrugBjCS4CutHMno0il4++cLnWC3gHOMrMfgYaA5dHGylrFHWAbJFUHT5sSoDdzexEMzuR4AYFq4EDgMim9PSWsnNuo1X1mf0AJM0ws70TlkXQdbFXlF1qPvrCuQyQtCXBTGoHEZwMG0PwFfiHKHNlS1UvyKEPwu60V8LlE4HR4VQAP0cVylvKzmVAeFeO0cBz4ao+QJfqcG87SbsSdDGVTt0JgJlV6cusw5bxiQQfpCL4IH3NIi6KXpSdy4Dy5lMu74KSqkjSNOARykzdWU1ay7Hj3RfOZcZ7kk4muLQaghupVpdbKK01s4ejDpEpksaY2cHhnUcSW6Wl0636nUecq+oSbi1UevVeHr/dZDTy/+jpkHQ9wY1g32D9qTt/rOg5btN5UXbOJSVpXjmrq+ztoCQ1TrY96g8bL8rOZYikfYCWrH8y7PXIArlyhR8yRvnjyCP/sPGi7FwGSHoS2AeYxW9dGGZmZ0eXKjMkFQD9SLiXHfComRVV+CS3ybwoO5cBkmab2R5R58gGSY8DBUD/cNVpQLGZnRtdqvSFQ+L6ADua2U2SWgDNzGx8lLl89IVzmfGxpD3MbHbUQbKgQ5m5SUaGw+SquocIvtV0A24iuH3XawQ3U42MF2XnMqM/QWH+hmCEQrW5mzVQLKmVmc0FkLQTCeOVq7ADzGw/SVMAzOwnSbWjDuVF2bnMeJLga/0Mqv6k9mVdTjAO+wuCD5sdgLOijZQRReFNCAxA0lbE4O/Oi7JzmfGVmb0ddYhsMLMRknYBdiMoynNK70JSxd1HMPZ6a0m3EFzwc020kfxEn3MZIekhgjtYD2T9Cyyq7JA4Sd3MbGQFk8FX6fdWSlJr4DCCD5sRZvZJxJG8pexchtQlKMZHJKwzgrskV1WdgZFAz3K2Ven3JikPmG5mewFzos6TyFvKzrkaSdLzwFVm9lXUWRJ5S9m5DJC0HXA/68+nfLGZLYg0WAZI+ms5q5cCk8xsaq7zZNA2wCxJ4/ltnhLM7NjoInlL2bmMCOdTHgCU3tftVKCPmXWPLlVmSBoAtCfoLwf4HTABaA28UlXvai2pc3nrzWxUrrMk8qLsXAZImmpmbStbVxVJegc40cyWh8ubAa8CJxC0lqvllYxR8RunOpcZ30s6VVJ++OdUoLrcCqoFsCZhuQjYwcxWkjDSpDqIww1hvU/Zucw4G3gA+DdBn/JHVI8LLCDolhkr6a1wuSfwQngvu+p2WfmjUQfw7gvnMkBSf+ASM/spXG4M/LM6zBIHwd2rgYMJ72VnZhMjjpQ2SS3N7Msy6zqY2YSIIgUZvCg7l77ybkkf5W3qM0FSQzNbVtGk8FFPBp8uSZOBnma2MFzuDDxgZntHmcu7L5zLjDxJW5RpKVf1/18DgGMIbpi6wb3sgCp555EEfwLelNQT2A+4FegRbSRvKTuXEZJOB64iGJVgQC/gFjN7NukTXaQkdSLoR14F/M7MlkQcyYuyc5kiaQ+CuXlL51Go0ifBJO2XbLuZTc5VlkySNJD1W/57AIuBn8AvHnHOxZSk95JsNjPrlrMwGVTRRSOl/OIR55xz61T1ExHOuSyTVA/4K9DCzPqWzq1sZoMijrZJJP3C+t0X6zYRfANomONI64fwlrJzLhlJLxGMwDjdzPaSVBf4uDpcQh5Hfpm1c64yrcJJh4oAwsurFW2kzJG0taQWpX+izuNF2TlXmTVh67j0XnatqAZzXkg6VtJnwDxgFPAlMDTSUHhRds5V7jpgGLB9ODH8COCKaCNlxE1AR+BTM9uR4LZQH0YbyfuUnXNJSBKwHfArQQETMNbMvo80WAZImmhm7SVNA/Y1sxJJ481s/yhz+egL51yFzMwkvWlm7YDBUefJsJ/DuaFHA89L+o6w3zxK3n3hnKvMWEkdog6RBdMIvgFcStA9M5cY3ETVuy+cc0lJmg3sCswnuJdd6XjefSINliZJk81svzLrpkf9vrz7wjlXmaOjDpBJkvoBFwCtJE1P2NQAP9HnnHO5JWlzYAvgNuBvCZt+icMc0V6UnXMbTdIgMzsm6hzVkRdl59xGk7SNmS2OOkd15KMvnHNJSaovKS9hOQ9YGmGkas2LsnOuMiOAegnL9YD/RpSl2vOi7JyrTKGZLS9dCB/XS7K/S4MXZedcZVYk3hpKUjtgZYR5qjUfp+ycq8wlwCuSFoXL2wC9I8xTrfnoC+dcpSQVALsRXM03x8winyOiuvKi7JxLKizI/YBDw1XvA496Yc4OL8rOuaQkPQ4UAP3DVacBxWZ2bnSpqi8vys65pCRNM7M2la1zmeGjL5xzlSkObwEFgKSdgOII81RrPvrCOVeZy4D3JH0RLrcEzoouTvXmRdk5V5ktgb0IivFxwIH4ZdZZ490XzrnK/MPMlgENge7AI8DD0UaqvrwoO+cqU9p//DvgETN7C6gdYZ5qzYuyc64yCyU9CvQChkiqg9eOrPEhcc65pCTVA44CZpjZZ5K2AfY2s+ERR6uWvCg751yM+FcQ55yLES/KzjkXI16UncsySY0kXZDF1z9T0gOV7HO9pMs28nWXV76XyzQvys5lXyOg3KIsKT/HWVzMeVF2LvtuB1pJmirpLkldJL0naQAwQ1JLSTNLd5Z0maTrw8etJA2TNEnSB5JaJzuQpJ6SxkmaIum/kpombG4jaaSkzySdl/CcyyVNkDRd0g2ZfetuY/ll1s5l39+AvcysLYCkLsD+4bp5klomee5jwPnhULQDgIeAbkn2HwN0NDOTdC5wBfB/4bZ9gI5AfWCKpMEEl0/vEuYR8LakQ81s9Ca9U5c2L8rORWO8mc1LtoOkzQjmmXhFUunqOpW87nbAS+FY4tpA4jHeMrOVwEpJ7xEU4oOBI4Ap4T6bERRpL8oR8aLsXDRWJDxey/pdiYXhzzzg59IWdoruB+42s7fDFvn1CdvKXpRgBK3j28zs0Y04hssi71N2Lvt+ARok2f4tsLWkLcNLmI8BCCcBmifpDwAKVDax/ObAwvDxGWW2HSepUNKWQBdgAvAOcHbYKkfStpK2Tv2tuUzzlrJzWWZmP0j6MDyZNxQYXGZ7kaQbgXEE3Q1zEjb3AR6WdA3BLZleBKYlOdz1BN0dC4GxwI4J28aHx24B3GRmi4BFknYHPg67SJYDpwLfbeLbdWnyy6ydcy5GvPvCOedixIuyc87FiBdl55yLES/KzjkXI16UnXMuRrwoO+dcjHhRds65GPGi7JxzMfL/D6L8OKbF2ScAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(MultinomialNB_ng, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the precision, recall, and F-measures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8241727732714297\n",
      "0.786046511627907\n",
      "0.7556869075079153\n"
     ]
    }
   ],
   "source": [
    "print(sklearn.metrics.precision_score(test_ng_df['category'], test_ng_df['nb_predict'], average = 'weighted')) #precision\n",
    "print(sklearn.metrics.recall_score(test_ng_df['category'], test_ng_df['nb_predict'], average = 'weighted')) #recall\n",
    "print(sklearn.metrics.f1_score(test_ng_df['category'], test_ng_df['nb_predict'], average = 'weighted')) #F-1 measure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can evaluate these per catagory. This has the same requiments as `plotConfusionMatrix`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sci.space</th>\n",
       "      <td>0.090698</td>\n",
       "      <td>0.871526</td>\n",
       "      <td>0.879630</td>\n",
       "      <td>0.751083</td>\n",
       "      <td>0.785124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>talk.religion.misc</th>\n",
       "      <td>0.125581</td>\n",
       "      <td>0.602941</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.331464</td>\n",
       "      <td>0.205882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>soc.religion.christian</th>\n",
       "      <td>0.141860</td>\n",
       "      <td>0.882664</td>\n",
       "      <td>0.701657</td>\n",
       "      <td>0.681283</td>\n",
       "      <td>0.947761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>comp.graphics</th>\n",
       "      <td>0.069767</td>\n",
       "      <td>0.937936</td>\n",
       "      <td>0.803150</td>\n",
       "      <td>0.777247</td>\n",
       "      <td>0.953271</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                     \n",
       "sci.space                 0.090698  0.871526   0.879630           0.751083   \n",
       "talk.religion.misc        0.125581  0.602941   1.000000           0.331464   \n",
       "soc.religion.christian    0.141860  0.882664   0.701657           0.681283   \n",
       "comp.graphics             0.069767  0.937936   0.803150           0.777247   \n",
       "\n",
       "                          Recall  \n",
       "Category                          \n",
       "sci.space               0.785124  \n",
       "talk.religion.misc      0.205882  \n",
       "soc.religion.christian  0.947761  \n",
       "comp.graphics           0.953271  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.metrics.evaluateClassifier(MultinomialNB_ng, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also plot the ROC curves. This has the same requiments as `plotConfusionMatrix`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotMultiROC(MultinomialNB_ng, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we can plot the PCA space visualization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(MultinomialNB_ng, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style=\"color:red\">*Exercise 2*</span>\n",
    "\n",
    "<span style=\"color:red\">In the cells immediately following, perform Logistic and Na√Øve Bayes classification (binary or multinomial) using training, testing and extrapolation (uncoded) data from texts and hand-classifications associated with your final project (e.g., these could be crowd-sourced codes gathered through Amazon Mechanical Turk last week). Visualize the confusion matrix for training and testing sets. Calculate precision, recall, the F-measure, and AUC, then perform an ROC visualization. How do these classifiers perform? Exrapolate codes from these models to all uncoded data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "twitter_data = pandas.read_csv(\"climate_change_john.csv\").iloc[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @lifeadvice_4you: when you think your dog i...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RT @aldatweets: ‚ÄúKey climate-change and energy...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RT @MarkFriesen08: Not only can we not send re...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RT @spikedonline: ‚ÄúIt‚Äôs ridiculous to say the ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@TyotoRiffle @MesiaArte @PerspicaciousXY @RedA...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet  category\n",
       "0  RT @lifeadvice_4you: when you think your dog i...        -1\n",
       "1  RT @aldatweets: ‚ÄúKey climate-change and energy...         0\n",
       "2  RT @MarkFriesen08: Not only can we not send re...         2\n",
       "3  RT @spikedonline: ‚ÄúIt‚Äôs ridiculous to say the ...         0\n",
       "4  @TyotoRiffle @MesiaArte @PerspicaciousXY @RedA...        -1"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twitter_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "twitter_data['tokenized_text'] = twitter_data['tweet'].apply(lambda x: lucem_illud_2020.word_tokenize(x))\n",
    "twitter_data['normalized_text'] = twitter_data['tokenized_text'].apply(lambda x: lucem_illud_2020.normalizeTokens(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "holdBackFraction = .2\n",
    "train_data_df, test_data_df = lucem_illud_2020.trainTestSplit(twitter_data, holdBackFraction=holdBackFraction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>category</th>\n",
       "      <th>tokenized_text</th>\n",
       "      <th>normalized_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>@paulbrislen You'd think when you literally st...</td>\n",
       "      <td>2</td>\n",
       "      <td>[@paulbrislen, You, 'd, think, when, you, lite...</td>\n",
       "      <td>[@paulbrislen, think, literally, start, get, b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>RT @1RossGittins: If we pretend it's not happe...</td>\n",
       "      <td>-1</td>\n",
       "      <td>[RT, @1RossGittins, If, we, pretend, it, 's, n...</td>\n",
       "      <td>[rt, @1rossgittin, pretend, happen, climate, c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>RT @rituparnasarm10: Yes definitely already Cl...</td>\n",
       "      <td>2</td>\n",
       "      <td>[RT, @rituparnasarm10, Yes, definitely, alread...</td>\n",
       "      <td>[rt, @rituparnasarm10, yes, definitely, climat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>@HillaryClinton I wish you would use your cons...</td>\n",
       "      <td>2</td>\n",
       "      <td>[@HillaryClinton, I, wish, you, would, use, yo...</td>\n",
       "      <td>[@hillaryclinton, wish, use, considerable, inf...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>RT @isaacwilliams: My friends and I got so mad...</td>\n",
       "      <td>2</td>\n",
       "      <td>[RT, @isaacwilliams, My, friends, and, I, got,...</td>\n",
       "      <td>[rt, @isaacwilliam, friend, get, mad, inaction...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                tweet  category  \\\n",
       "34  @paulbrislen You'd think when you literally st...         2   \n",
       "10  RT @1RossGittins: If we pretend it's not happe...        -1   \n",
       "18  RT @rituparnasarm10: Yes definitely already Cl...         2   \n",
       "21  @HillaryClinton I wish you would use your cons...         2   \n",
       "47  RT @isaacwilliams: My friends and I got so mad...         2   \n",
       "\n",
       "                                       tokenized_text  \\\n",
       "34  [@paulbrislen, You, 'd, think, when, you, lite...   \n",
       "10  [RT, @1RossGittins, If, we, pretend, it, 's, n...   \n",
       "18  [RT, @rituparnasarm10, Yes, definitely, alread...   \n",
       "21  [@HillaryClinton, I, wish, you, would, use, yo...   \n",
       "47  [RT, @isaacwilliams, My, friends, and, I, got,...   \n",
       "\n",
       "                                      normalized_text  \n",
       "34  [@paulbrislen, think, literally, start, get, b...  \n",
       "10  [rt, @1rossgittin, pretend, happen, climate, c...  \n",
       "18  [rt, @rituparnasarm10, yes, definitely, climat...  \n",
       "21  [@hillaryclinton, wish, use, considerable, inf...  \n",
       "47  [rt, @isaacwilliam, friend, get, mad, inaction...  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression\n",
    "TFVectorizer = sklearn.feature_extraction.text.TfidfVectorizer(max_df=100, min_df=2, stop_words='english', norm='l2')\n",
    "TFVects = TFVectorizer.fit_transform(train_data_df['tweet'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_df['vect'] = [np.array(v).flatten() for v in TFVects.todense()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = sklearn.decomposition.PCA()\n",
    "reduced_data = pca.fit_transform(np.stack(train_data_df['vect'], axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_df['pca'] = [r for r in reduced_data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = len(train_data_df)\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize = (10, 5))\n",
    "\n",
    "eigen_vals = np.arange(n) + 1\n",
    "ax1.plot(eigen_vals, pca.explained_variance_ratio_, 'ro-', linewidth=1)\n",
    "ax1.set_title('Scree Plot (Full)')\n",
    "ax1.set_xlabel('Principal Component')\n",
    "ax1.set_ylabel('Proportion of Explained Variance')\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I will choose to have 5 pca\n",
    "train_data_df['pca_reduced_5'] = train_data_df['pca'].apply(lambda x: x[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic = sklearn.linear_model.LogisticRegression()\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_5'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.575"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic.score(np.stack(train_data_df['pca_reduced_5'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4444444444444444"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create vectors\n",
    "TFVects_test = TFVectorizer.transform(test_data_df['tweet'])\n",
    "test_data_df['vect'] = [np.array(v).flatten() for v in TFVects_test.todense()]\n",
    "\n",
    "#PCA\n",
    "reduced_data_test = pca.transform(np.stack(test_data_df['vect'], axis=0))\n",
    "test_data_df['pca'] = [r for r in reduced_data_test]\n",
    "test_data_df['pca_reduced_5'] = test_data_df['pca'].apply(lambda x: x[:5])\n",
    "\n",
    "#Test\n",
    "logistic.score(np.stack(test_data_df['pca_reduced_5'], axis=0), test_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.85\n",
      "Testing:\n",
      "0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "train_data_df['pca_reduced_40'] = train_data_df['pca'].apply(lambda x: x[:40])\n",
    "test_data_df['pca_reduced_40'] = test_data_df['pca'].apply(lambda x: x[:40])\n",
    "\n",
    "logistic.fit(np.stack(train_data_df['pca_reduced_40'], axis=0), train_data_df['category'])\n",
    "\n",
    "print(\"Training:\")\n",
    "print(logistic.score(np.stack(train_data_df['pca_reduced_40'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(logistic.score(np.stack(test_data_df['pca_reduced_40'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.85\n"
     ]
    }
   ],
   "source": [
    "# L1 logistic regression\n",
    "logistic_l1= sklearn.linear_model.LogisticRegression(penalty='l2')\n",
    "logistic_l1.fit(np.stack(train_data_df['vect'], axis=0), train_data_df['category'])\n",
    "print(logistic_l1.score(np.stack(train_data_df['vect'], axis=0), train_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "print(logistic_l1.score(np.stack(test_data_df['vect'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Naive Bayes\n",
    "naiveBayes = sklearn.naive_bayes.BernoulliNB()\n",
    "naiveBayes.fit(np.stack(train_data_df['vect'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training:\n",
      "0.65\n",
      "Testing:\n",
      "0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "print(\"Training:\")\n",
    "print(naiveBayes.score(np.stack(train_data_df['vect'], axis=0), train_data_df['category']))\n",
    "print(\"Testing:\")\n",
    "print(naiveBayes.score(np.stack(test_data_df['vect'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data_df['nb_predict'] = naiveBayes.predict(np.stack(test_data_df['vect'], axis=0))\n",
    "test_data_df['nb_predict_prob_true'] = naiveBayes.predict_proba(np.stack(test_data_df['vect'], axis=0))[:,0] #other is prop false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\John Xu\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2916666666666667"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.precision_score(test_data_df['category'], test_data_df['nb_predict'], average='macro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.25"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.recall_score(test_data_df['category'], test_data_df['nb_predict'], average='macro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.22916666666666666"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.f1_score(test_data_df['category'], test_data_df['nb_predict'], average='macro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Multinomial NB\n",
    "MultinomialNB_ng = sklearn.naive_bayes.MultinomialNB()\n",
    "MultinomialNB_ng.fit(np.stack(train_data_df['vect'], axis = 0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score:\n",
      "0.775\n"
     ]
    }
   ],
   "source": [
    "train_data_df['nb_predict'] = MultinomialNB_ng.predict(np.stack(train_data_df['vect'], axis=0))\n",
    "print(\"Training score:\")\n",
    "print(MultinomialNB_ng.score(np.stack(train_data_df['vect'], axis=0), train_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing score:\n",
      "0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "# Try test set\n",
    "#Add to df\n",
    "test_data_df['nb_predict'] = MultinomialNB_ng.predict(np.stack(test_data_df['vect'], axis=0))\n",
    "\n",
    "#Test\n",
    "print(\"Testing score:\")\n",
    "print(MultinomialNB_ng.score(np.stack(test_data_df['vect'], axis=0), test_data_df['category']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotMultiROC(MultinomialNB_ng, test_data_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Decision Trees"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Decision trees can be used to predict both categorical/class labels (i.e., classification) and continuous labels (i.e., regression)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "blobs_df = lucem_illud_2020.multiBlobs(noise=.2, centers=[(0,0), (0,5), (5,0), (-5,0), (0,-5)])\n",
    "df_exampleTree_train, df_exampleTree_test = lucem_illud_2020.trainTestSplit(blobs_df)\n",
    "lucem_illud_2020.plotter(df_exampleTree_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we import our Decision Tree classifier from sklearn.tree (familiar syntax) and fit it using the fit method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=4, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=0, splitter='best')"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_tree = sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)\n",
    "clf_tree.fit(np.stack(df_exampleTree_train['vect'], axis =0), df_exampleTree_train['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see what's going on visually with the classification: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(clf_tree, df_exampleTree_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.016</td>\n",
       "      <td>0.974419</td>\n",
       "      <td>0.958763</td>\n",
       "      <td>0.927226</td>\n",
       "      <td>0.958763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.006</td>\n",
       "      <td>0.992667</td>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.973520</td>\n",
       "      <td>0.990385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.006</td>\n",
       "      <td>0.992667</td>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.973520</td>\n",
       "      <td>0.990385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.004</td>\n",
       "      <td>0.993165</td>\n",
       "      <td>0.988764</td>\n",
       "      <td>0.979654</td>\n",
       "      <td>0.988764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.004</td>\n",
       "      <td>0.990566</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.985132</td>\n",
       "      <td>0.981132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.016  0.974419   0.958763           0.927226  0.958763\n",
       "1              0.006  0.992667   0.980952           0.973520  0.990385\n",
       "2              0.006  0.992667   0.980952           0.973520  0.990385\n",
       "3              0.004  0.993165   0.988764           0.979654  0.988764\n",
       "4              0.004  0.990566   1.000000           0.985132  0.981132"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_tree, df_exampleTree_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets look at accuracy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.982"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.accuracy_score(df_exampleTree_test['category'],clf_tree.predict(np.stack(df_exampleTree_test['vect'], axis = 0)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What happens if we trim the tree?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "depthvec = []\n",
    "scorevec = []\n",
    "for i in range(1,20):\n",
    "    tree2 = sklearn.tree.DecisionTreeClassifier(max_depth=i,random_state=0)\n",
    "    tree2.fit(np.stack(df_exampleTree_train['vect'], axis =0), df_exampleTree_train['category'])\n",
    "    score = sklearn.metrics.accuracy_score(df_exampleTree_test['category'], tree2.predict(np.stack(df_exampleTree_test['vect'], axis = 0)))\n",
    "    depthvec.append(i)\n",
    "    scorevec.append(score)\n",
    "plt.scatter(depthvec,scorevec)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can select different layers of the decision tree or \"prune\" it. At approximately four layers down in the decision tree, the shape is somewhat odd, suggesting that our model is overfitting beyond those four layers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combining multiple overfitting estimators turns out to be a key idea in machine learning. This is called **bagging** and is a type of **ensemble** method. The idea is to make many randomized estimators--each can overfit, as decision trees are wont to do--but then to combine them, ultimately producing a better classification. A **random forest** is produced by bagging decision trees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = sklearn.tree.DecisionTreeClassifier(max_depth=10) #Create an instance of our decision tree classifier.\n",
    "\n",
    "bag = sklearn.ensemble.BaggingClassifier(tree, n_estimators=100, max_samples=0.8, random_state=1) #Each tree uses up to 80% of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingClassifier(base_estimator=DecisionTreeClassifier(ccp_alpha=0.0,\n",
       "                                                        class_weight=None,\n",
       "                                                        criterion='gini',\n",
       "                                                        max_depth=10,\n",
       "                                                        max_features=None,\n",
       "                                                        max_leaf_nodes=None,\n",
       "                                                        min_impurity_decrease=0.0,\n",
       "                                                        min_impurity_split=None,\n",
       "                                                        min_samples_leaf=1,\n",
       "                                                        min_samples_split=2,\n",
       "                                                        min_weight_fraction_leaf=0.0,\n",
       "                                                        presort='deprecated',\n",
       "                                                        random_state=None,\n",
       "                                                        splitter='best'),\n",
       "                  bootstrap=True, bootstrap_features=False, max_features=1.0,\n",
       "                  max_samples=0.8, n_estimators=100, n_jobs=None,\n",
       "                  oob_score=False, random_state=1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag.fit(np.stack(df_exampleTree_train['vect'], axis =0), df_exampleTree_train['category']) #Fit the bagged classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(bag, df_exampleTree_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.024</td>\n",
       "      <td>0.969456</td>\n",
       "      <td>0.920792</td>\n",
       "      <td>0.890821</td>\n",
       "      <td>0.958763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.006</td>\n",
       "      <td>0.992667</td>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.973520</td>\n",
       "      <td>0.990385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.014</td>\n",
       "      <td>0.973436</td>\n",
       "      <td>0.980198</td>\n",
       "      <td>0.943073</td>\n",
       "      <td>0.951923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.004</td>\n",
       "      <td>0.993165</td>\n",
       "      <td>0.988764</td>\n",
       "      <td>0.979654</td>\n",
       "      <td>0.988764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.004</td>\n",
       "      <td>0.990566</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.985132</td>\n",
       "      <td>0.981132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       "0              0.024  0.969456   0.920792           0.890821  0.958763\n",
       "1              0.006  0.992667   0.980952           0.973520  0.990385\n",
       "2              0.014  0.973436   0.980198           0.943073  0.951923\n",
       "3              0.004  0.993165   0.988764           0.979654  0.988764\n",
       "4              0.004  0.990566   1.000000           0.985132  0.981132"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(bag, df_exampleTree_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(bag, df_exampleTree_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style=\"color:red\">*Exercise 3*</span>\n",
    "\n",
    "<span style=\"color:red\">In the cells immediately following, perform decision tree and random forest classification (binary, multinomial or continuous) using training, testing and extrapolation (uncoded) data from texts and hand-classifications associated with your final project. As with ***Exercise 2***, these could be crowd-sourced codes gathered through Amazon Mechanical Turk last week. Visualize the classification of data points. Calculate relevant metrics (e.g., precision, recall, the F-measure, and AUC). Now build an ensemble classifier by bagging trees into a random forest. Visualize the result. How do these classifiers perform? What does ensemble learning do?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=4, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=0, splitter='best')"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_tree = sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)\n",
    "clf_tree.fit(np.stack(train_data_df['vect'], axis =0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(clf_tree, train_data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4444444444444444"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.accuracy_score(test_data_df['category'],clf_tree.predict(np.stack(test_data_df['vect'], axis = 0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\John Xu\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\John Xu\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.722222</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision  Recall\n",
       "Category                                                            \n",
       " 0          0.111111  0.500000   0.000000           0.111111     0.0\n",
       " 1          0.222222  0.500000   0.000000           0.222222     0.0\n",
       " 2          0.555556  0.642857   0.285714           0.285714     1.0\n",
       "-1          0.222222  0.750000   1.000000           0.722222     0.5"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_tree, test_data_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# K-Nearest Neighbors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The K-Nearest neighbors classifier takes a simpler premise than those before: Find the closest labeled datapoint in set and \"borrow\" its label.\n",
    "\n",
    "Let's use newsgroup data again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>category</th>\n",
       "      <th>source_file</th>\n",
       "      <th>tokenized_text</th>\n",
       "      <th>normalized_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>\\n\\nParadise and salvation are not the same th...</td>\n",
       "      <td>talk.religion.misc</td>\n",
       "      <td>../data/20news_home/20news-bydate-train/talk.r...</td>\n",
       "      <td>[Paradise, and, salvation, are, not, the, same...</td>\n",
       "      <td>[paradise, salvation, thing, salvation, better...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>\\nYou're admitting a lot more than that.  You ...</td>\n",
       "      <td>talk.religion.misc</td>\n",
       "      <td>../data/20news_home/20news-bydate-train/talk.r...</td>\n",
       "      <td>[You, 're, admitting, a, lot, more, than, that...</td>\n",
       "      <td>[admit, lot, admit, moral, situational, admit,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n\\nJesus also recognized other holy days, lik...</td>\n",
       "      <td>talk.religion.misc</td>\n",
       "      <td>../data/20news_home/20news-bydate-train/talk.r...</td>\n",
       "      <td>[Jesus, also, recognized, other, holy, days, l...</td>\n",
       "      <td>[jesus, recognize, holy, day, like, passover, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>In &lt;lsjc8cINNmc1@saltillo.cs.utexas.edu&gt; turpi...</td>\n",
       "      <td>talk.religion.misc</td>\n",
       "      <td>../data/20news_home/20news-bydate-train/talk.r...</td>\n",
       "      <td>[In, &lt;, lsjc8cINNmc1@saltillo.cs.utexas.edu, &gt;...</td>\n",
       "      <td>[&lt;, lsjc8cinnmc1@saltillo.cs.utexas.edu, &gt;, tu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>\\nI'm sorry, but He does not!  Ever read the F...</td>\n",
       "      <td>talk.religion.misc</td>\n",
       "      <td>../data/20news_home/20news-bydate-train/talk.r...</td>\n",
       "      <td>[I, 'm, sorry, but, He, does, not, Ever, read,...</td>\n",
       "      <td>[m, sorry, read, commandment]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text            category  \\\n",
       "0  \\n\\nParadise and salvation are not the same th...  talk.religion.misc   \n",
       "1  \\nYou're admitting a lot more than that.  You ...  talk.religion.misc   \n",
       "2  \\n\\nJesus also recognized other holy days, lik...  talk.religion.misc   \n",
       "3  In <lsjc8cINNmc1@saltillo.cs.utexas.edu> turpi...  talk.religion.misc   \n",
       "4  \\nI'm sorry, but He does not!  Ever read the F...  talk.religion.misc   \n",
       "\n",
       "                                         source_file  \\\n",
       "0  ../data/20news_home/20news-bydate-train/talk.r...   \n",
       "1  ../data/20news_home/20news-bydate-train/talk.r...   \n",
       "2  ../data/20news_home/20news-bydate-train/talk.r...   \n",
       "3  ../data/20news_home/20news-bydate-train/talk.r...   \n",
       "4  ../data/20news_home/20news-bydate-train/talk.r...   \n",
       "\n",
       "                                      tokenized_text  \\\n",
       "0  [Paradise, and, salvation, are, not, the, same...   \n",
       "1  [You, 're, admitting, a, lot, more, than, that...   \n",
       "2  [Jesus, also, recognized, other, holy, days, l...   \n",
       "3  [In, <, lsjc8cINNmc1@saltillo.cs.utexas.edu, >...   \n",
       "4  [I, 'm, sorry, but, He, does, not, Ever, read,...   \n",
       "\n",
       "                                     normalized_text  \n",
       "0  [paradise, salvation, thing, salvation, better...  \n",
       "1  [admit, lot, admit, moral, situational, admit,...  \n",
       "2  [jesus, recognize, holy, day, like, passover, ...  \n",
       "3  [<, lsjc8cinnmc1@saltillo.cs.utexas.edu, >, tu...  \n",
       "4                      [m, sorry, read, commandment]  "
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsgroupsDF[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a testing and training set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "holdBackFraction = .2\n",
    "train_ng_df, test_ng_df = lucem_illud_2020.trainTestSplit(newsgroupsDF, holdBackFraction=holdBackFraction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's initialize our k-nearest neighbors classifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_neighbors = 15\n",
    "weights=\"uniform\"\n",
    "clf_knearest = sklearn.neighbors.KNeighborsClassifier(n_neighbors, weights=weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try to classify using the TF-IDF vectors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "TFVectorizer_ng = sklearn.feature_extraction.text.TfidfVectorizer(max_df=100, min_df=2, stop_words='english', norm='l2')\n",
    "TFVects_ng = TFVectorizer_ng.fit_transform(train_ng_df['text'])\n",
    "train_ng_df['vect'] = [np.array(v).flatten() for v in TFVects_ng.todense()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_knearest.fit(np.stack(train_ng_df['vect'], axis = 0), train_ng_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sci.space</th>\n",
       "      <td>0.389437</td>\n",
       "      <td>0.651071</td>\n",
       "      <td>0.391787</td>\n",
       "      <td>0.361935</td>\n",
       "      <td>0.741597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>talk.religion.misc</th>\n",
       "      <td>0.217063</td>\n",
       "      <td>0.689485</td>\n",
       "      <td>0.400498</td>\n",
       "      <td>0.296511</td>\n",
       "      <td>0.547619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>soc.religion.christian</th>\n",
       "      <td>0.279164</td>\n",
       "      <td>0.506160</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.291485</td>\n",
       "      <td>0.012320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>comp.graphics</th>\n",
       "      <td>0.327336</td>\n",
       "      <td>0.567698</td>\n",
       "      <td>0.381643</td>\n",
       "      <td>0.308156</td>\n",
       "      <td>0.339056</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Error_Rate       AUC  Precision  Average_Precision  \\\n",
       "Category                                                                     \n",
       "sci.space                 0.389437  0.651071   0.391787           0.361935   \n",
       "talk.religion.misc        0.217063  0.689485   0.400498           0.296511   \n",
       "soc.religion.christian    0.279164  0.506160   1.000000           0.291485   \n",
       "comp.graphics             0.327336  0.567698   0.381643           0.308156   \n",
       "\n",
       "                          Recall  \n",
       "Category                          \n",
       "sci.space               0.741597  \n",
       "talk.religion.misc      0.547619  \n",
       "soc.religion.christian  0.012320  \n",
       "comp.graphics           0.339056  "
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_knearest, train_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And lets look at the testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing score:\n",
      "0.23953488372093024\n"
     ]
    }
   ],
   "source": [
    "#Create vectors\n",
    "TFVects_test = TFVectorizer_ng.transform(test_ng_df['text'])\n",
    "test_ng_df['vect'] = [np.array(v).flatten() for v in TFVects_test.todense()]\n",
    "\n",
    "#Add to df\n",
    "test_ng_df['nb_predict'] = clf_knearest.predict(np.stack(test_ng_df['vect'], axis=0))\n",
    "\n",
    "#Test\n",
    "print(\"Testing score:\")\n",
    "print(clf_knearest.score(np.stack(test_ng_df['vect'], axis=0), test_ng_df['category']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's produce another confusion matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf_knearest, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can produce the PCA space visual if you want, altough it can take a very long time, so we'll leave it optionally commented out:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#lucem_illud_2020.plotregions(clf_knearest, test_ng_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style=\"color:red\">*Exercise 4*</span>\n",
    "\n",
    "<span style=\"color:red\">In the cells immediately following, perform and visualize k-nearest neighbor classification using training, testing and extrapolation (uncoded) data from texts and hand-classifications associated with your final project. Visualize the classification of data points and calculate relevant metrics (e.g., precision, recall, the F-measure, and AUC). Articulate how the *k*-nearest neighbor approach relates to *k*-means clustering explored in ***week 3***?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_neighbors = 15\n",
    "weights=\"uniform\"\n",
    "clf_knearest = sklearn.neighbors.KNeighborsClassifier(n_neighbors, weights=weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_knearest.fit(np.stack(train_data_df['vect'], axis = 0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.225</td>\n",
       "      <td>0.777473</td>\n",
       "      <td>0.647059</td>\n",
       "      <td>0.583403</td>\n",
       "      <td>0.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.200</td>\n",
       "      <td>0.546875</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.237500</td>\n",
       "      <td>0.125000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.300</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.310000</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>0.175</td>\n",
       "      <td>0.796875</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>0.459091</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision    Recall\n",
       "Category                                                              \n",
       " 0             0.225  0.777473   0.647059           0.583403  0.785714\n",
       " 1             0.200  0.546875   0.500000           0.237500  0.125000\n",
       " 2             0.300  0.600000   0.400000           0.310000  0.400000\n",
       "-1             0.175  0.796875   0.545455           0.459091  0.750000"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_knearest, train_data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf_knearest, test_data_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# SVMs\n",
    "\n",
    "Now we will examine Support Vector Machines, an approach that creates the partition that preserves the \"maximum margin\" between classes.\n",
    "\n",
    "We will use a few sub forums from reddit--which tend to share text rather than memes--namely `talesfromtechsupport`, `badroommates`, `weeabootales` and `relationships`. The top 100 text posts from each have been saved to `data/reddit.csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-174-bf5fc06c2bb3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;31m#tokenize and normalize\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'tokenized_text'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'text'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mword_tokenize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'normalized_text'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'tokenized_text'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnormalizeTokens\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python36\\site-packages\\pandas\\core\\series.py\u001b[0m in \u001b[0;36mapply\u001b[1;34m(self, func, convert_dtype, args, **kwds)\u001b[0m\n\u001b[0;32m   4043\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4044\u001b[0m                 \u001b[0mvalues\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4045\u001b[1;33m                 \u001b[0mmapped\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmap_infer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mconvert_dtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4046\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4047\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSeries\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32m<ipython-input-174-bf5fc06c2bb3>\u001b[0m in \u001b[0;36m<lambda>\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;31m#tokenize and normalize\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'tokenized_text'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'text'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mword_tokenize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'normalized_text'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mredditDf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'tokenized_text'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlucem_illud_2020\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnormalizeTokens\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\lucem_illud_2020\\proccessing.py\u001b[0m in \u001b[0;36mword_tokenize\u001b[1;34m(word_list)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mword_tokenize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mword_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m     \u001b[0mtokenized\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m     \u001b[0mdoc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnlp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mword_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mtoken\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdoc\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mtoken\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_punct\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtoken\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\spacy\\language.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, text, disable, component_cfg)\u001b[0m\n\u001b[0;32m    433\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mproc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"__call__\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    434\u001b[0m                 \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mErrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mE003\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcomponent\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mproc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 435\u001b[1;33m             \u001b[0mdoc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mproc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdoc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mcomponent_cfg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    436\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mdoc\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    437\u001b[0m                 \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mErrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mE005\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpipes.pyx\u001b[0m in \u001b[0;36mspacy.pipeline.pipes.Tagger.__call__\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpipes.pyx\u001b[0m in \u001b[0;36mspacy.pipeline.pipes.Tagger.predict\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\feed_forward.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     38\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     39\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_layers\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 40\u001b[1;33m             \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     41\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\api.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(seqs_in)\u001b[0m\n\u001b[0;32m    308\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mseqs_in\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    309\u001b[0m         \u001b[0mlengths\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mseq\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mseq\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mseqs_in\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 310\u001b[1;33m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlayer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mseqs_in\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpad\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mpad\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    311\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munflatten\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpad\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mpad\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    312\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\feed_forward.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     38\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     39\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_layers\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 40\u001b[1;33m             \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     41\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\resnet.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m         \u001b[0mY\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_layers\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\feed_forward.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     38\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     39\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_layers\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 40\u001b[1;33m             \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     41\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\model.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m    167\u001b[0m             \u001b[0mMust\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mexpected\u001b[0m \u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \"\"\"\n\u001b[1;32m--> 169\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m128\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\layernorm.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     51\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mchild\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     52\u001b[0m             \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mchild\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 53\u001b[1;33m         \u001b[0mN\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvar\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_get_moments\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     54\u001b[0m         \u001b[0mXh\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_forward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvar\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     55\u001b[0m         \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mXh\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mG\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda_Navigator\\envs\\computational_content_analysis\\lib\\site-packages\\thinc\\neural\\_classes\\layernorm.py\u001b[0m in \u001b[0;36m_get_moments\u001b[1;34m(ops, X)\u001b[0m\n\u001b[0;32m    103\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mREPRODUCE_BUG\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    104\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_get_moments_reproduce_bug\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 105\u001b[1;33m     \u001b[0mmu\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    106\u001b[0m     \u001b[0mvar\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvar\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1e-08\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    107\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"f\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvar\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python36\\site-packages\\numpy\\core\\_methods.py\u001b[0m in \u001b[0;36m_mean\u001b[1;34m(a, axis, dtype, out, keepdims)\u001b[0m\n\u001b[0;32m    149\u001b[0m             \u001b[0mis_float16_result\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    150\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 151\u001b[1;33m     \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mumr_sum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    152\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mret\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    153\u001b[0m         ret = um.true_divide(\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "redditDf = pandas.read_csv('../data/reddit.csv', index_col = 0)\n",
    "\n",
    "#Drop a couple missing values\n",
    "\n",
    "redditDf = redditDf.dropna()\n",
    "\n",
    "#Set category\n",
    "\n",
    "redditDf['category'] = redditDf['subreddit']\n",
    "\n",
    "#tokenize and normalize\n",
    "redditDf['tokenized_text'] = redditDf['text'].apply(lambda x: lucem_illud_2020.word_tokenize(x))\n",
    "redditDf['normalized_text'] = redditDf['tokenized_text'].apply(lambda x: lucem_illud_2020.normalizeTokens(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will tf.idf the data to make our vectors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "redditTFVectorizer = sklearn.feature_extraction.text.TfidfVectorizer(max_df=0.5, min_df=3, stop_words='english', norm='l2')\n",
    "redditTFVects = redditTFVectorizer.fit_transform([' '.join(l) for l in redditDf['normalized_text']])\n",
    "redditDf['vect'] = [np.array(v).flatten() for v in redditTFVects.todense()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initilize the model and make a train test split:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "holdBackFraction = .2\n",
    "train_redditDf, test_redditDf = lucem_illud_2020.trainTestSplit(redditDf, holdBackFraction=holdBackFraction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_svm = sklearn.svm.SVC(kernel='linear', probability = False)\n",
    "#probability = True is slower but  lets you call predict_proba()\n",
    "clf_svm.fit(np.stack(train_redditDf['vect'], axis=0), train_redditDf['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "...and consider the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_svm, test_redditDf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf_svm, test_redditDf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.plotregions(clf_svm, test_redditDf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Nets\n",
    "\n",
    "We include an example of a simple neural network, the Multi-layer Perceptron (MLP) that learns a function $f(\\cdot): R^m \\rightarrow R^o$ by training on a dataset, where $m$ is the number of dimensions for input and $o$ is the number of dimensions for output. Given a set of features $X = {x_1, x_2, ..., x_m}$ and a target $y$, it can learn a non-linear function approximator for either classification or regression. It is different from logistic regression, in that between the input and the output layer, there can be one or more non-linear layers, called hidden layers. The following figure shows a one hidden layer MLP with scalar output. ![title](../data/multilayerperceptron_network.png) The leftmost layer, known as the input layer, consists of a set of \"neurons\" $\\{x_i | x_1, x_2, ..., x_m\\}$ representing the input features (e.g., weighted words). Each neuron in the hidden layer transforms the values from the previous layer with a weighted linear summation $w_1x_1 + w_2x_2 + ... + w_mx_m$, followed by a non-linear activation function $g(\\cdot):R \\rightarrow R$ - like the logistic or hyperbolic tan function. The output layer receives the values from the last hidden layer and transforms them into output values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_nn = sklearn.neural_network.MLPClassifier()\n",
    "clf_nn.fit(np.stack(train_redditDf['vect'], axis=0), train_redditDf['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nn, test_redditDf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf_nn, test_redditDf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lucem_illud_2020.plotregions(clf_nn, test_redditDf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It performs very well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style=\"color:red\">*Exercise 5*</span>\n",
    "\n",
    "<span style=\"color:red\">In the cells immediately following, perform a neural network classification and calculate relevant metrics (e.g., precision, recall, the F-measure, and AUC). How does this classify relevant to *k*-nearest neighbor, Naive Bayes, logistic and decision-tree approaches?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\John Xu\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\neural_network\\_multilayer_perceptron.py:571: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "              beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "              hidden_layer_sizes=(100,), learning_rate='constant',\n",
       "              learning_rate_init=0.001, max_fun=15000, max_iter=200,\n",
       "              momentum=0.9, n_iter_no_change=10, nesterovs_momentum=True,\n",
       "              power_t=0.5, random_state=None, shuffle=True, solver='adam',\n",
       "              tol=0.0001, validation_fraction=0.1, verbose=False,\n",
       "              warm_start=False)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_nn = sklearn.neural_network.MLPClassifier()\n",
    "clf_nn.fit(np.stack(train_data_df['vect'], axis=0), train_data_df['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error_Rate</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Average_Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.361111</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.722222</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Error_Rate       AUC  Precision  Average_Precision  Recall\n",
       "Category                                                            \n",
       " 0          0.333333  0.812500       0.25           0.250000     1.0\n",
       " 1          0.333333  0.428571       0.00           0.222222     0.0\n",
       " 2          0.222222  0.678571       0.50           0.361111     0.5\n",
       "-1          0.222222  0.750000       1.00           0.722222     0.5"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lucem_illud_2020.evaluateClassifier(clf_nn, test_data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotConfusionMatrix(clf_nn, test_data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lucem_illud_2020.plotregions(clf_nn, test_data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
